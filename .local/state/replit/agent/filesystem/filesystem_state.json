{"file_contents":{"middleware.ts":{"content":"import { NextResponse, type NextRequest } from \"next/server\"\n\nexport async function middleware(request: NextRequest) {\n  // Protected routes\n  const protectedRoutes = [\"/register\", \"/generate-code\", \"/waiting\", \"/vote\", \"/success\", \"/admin\", \"/super-admin\"]\n  const adminRoutes = [\"/admin\"]\n  const superAdminRoutes = [\"/super-admin\"]\n\n  const isProtectedRoute = protectedRoutes.some((route) => request.nextUrl.pathname.startsWith(route))\n  const isAdminRoute = adminRoutes.some((route) => request.nextUrl.pathname.startsWith(route))\n  const isSuperAdminRoute = superAdminRoutes.some((route) => request.nextUrl.pathname.startsWith(route))\n\n  // Mock authentication check - for testing, allow access to most routes\n  const hasAuth = request.cookies.get(\"mock-auth\")?.value === \"true\"\n\n  if (isProtectedRoute && !hasAuth && !request.nextUrl.pathname.startsWith(\"/login\")) {\n    // Redirect to login if not authenticated\n    const url = request.nextUrl.clone()\n    url.pathname = \"/login\"\n    return NextResponse.redirect(url)\n  }\n\n  // For testing purposes, allow admin access\n  // In production, this would check actual user roles from database\n\n  return NextResponse.next()\n}\n\nexport const config = {\n  matcher: [\"/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)\"],\n}\n","size_bytes":1301},"pnpm-lock.yaml":{"content":"lockfileVersion: '9.0'\n\nsettings:\n  autoInstallPeers: true\n  excludeLinksFromLockfile: false","size_bytes":92},"app/globals.css":{"content":"@import \"tailwindcss\";\n@import \"tw-animate-css\";\n\n@custom-variant dark (&:is(.dark *));\n\n:root {\n  /* Updated color tokens to match ITERA election design brief */\n  --background: #ffffff;\n  --foreground: #1f2937;\n  --card: #f8fafc;\n  --card-foreground: #1f2937;\n  --popover: #ffffff;\n  --popover-foreground: #1f2937;\n  --primary: #374151;\n  --primary-foreground: #ffffff;\n  --secondary: #6366f1;\n  --secondary-foreground: #ffffff;\n  --muted: #f9fafb;\n  --muted-foreground: #4b5563;\n  --accent: #6366f1;\n  --accent-foreground: #ffffff;\n  --destructive: #ea580c;\n  --destructive-foreground: #ffffff;\n  --border: #d1d5db;\n  --input: #ffffff;\n  --ring: rgba(99, 102, 241, 0.5);\n  --chart-1: #6366f1;\n  --chart-2: #4b5563;\n  --chart-3: #ea580c;\n  --chart-4: #0891b2;\n  --chart-5: #374151;\n  --radius: 0.5rem;\n  --sidebar: #f8fafc;\n  --sidebar-foreground: #1f2937;\n  --sidebar-primary: #374151;\n  --sidebar-primary-foreground: #ffffff;\n  --sidebar-accent: #6366f1;\n  --sidebar-accent-foreground: #ffffff;\n  --sidebar-border: #d1d5db;\n  --sidebar-ring: rgba(99, 102, 241, 0.5);\n}\n\n.dark {\n  --background: #0f172a;\n  --foreground: #f1f5f9;\n  --card: #1e293b;\n  --card-foreground: #f1f5f9;\n  --popover: #1e293b;\n  --popover-foreground: #f1f5f9;\n  --primary: #f1f5f9;\n  --primary-foreground: #0f172a;\n  --secondary: #4338ca;\n  --secondary-foreground: #f1f5f9;\n  --muted: #334155;\n  --muted-foreground: #94a3b8;\n  --accent: #4338ca;\n  --accent-foreground: #f1f5f9;\n  --destructive: #dc2626;\n  --destructive-foreground: #f1f5f9;\n  --border: #334155;\n  --input: #1e293b;\n  --ring: rgba(67, 56, 202, 0.5);\n  --chart-1: #4338ca;\n  --chart-2: #94a3b8;\n  --chart-3: #dc2626;\n  --chart-4: #0891b2;\n  --chart-5: #374151;\n  --sidebar: #1e293b;\n  --sidebar-foreground: #f1f5f9;\n  --sidebar-primary: #4338ca;\n  --sidebar-primary-foreground: #f1f5f9;\n  --sidebar-accent: #4338ca;\n  --sidebar-accent-foreground: #f1f5f9;\n  --sidebar-border: #334155;\n  --sidebar-ring: rgba(67, 56, 202, 0.5);\n}\n\n@theme inline {\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-destructive-foreground: var(--destructive-foreground);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n","size_bytes":3771},"app/layout.tsx":{"content":"import type { Metadata } from 'next'\nimport { GeistSans } from 'geist/font/sans'\nimport { GeistMono } from 'geist/font/mono'\nimport { Analytics } from '@vercel/analytics/next'\nimport './globals.css'\n\nexport const metadata: Metadata = {\n  title: 'v0 App',\n  description: 'Created with v0',\n  generator: 'v0.app',\n}\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode\n}>) {\n  return (\n    <html lang=\"en\">\n      <body className={`font-sans ${GeistSans.variable} ${GeistMono.variable}`}>\n        {children}\n        <Analytics />\n      </body>\n    </html>\n  )\n}\n","size_bytes":598},"app/page.tsx":{"content":"import { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Vote, Users, Shield, Clock } from \"@/lib/icons\"\nimport Link from \"next/link\"\n\nexport default function LandingPage() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-muted/30 to-background\">\n      {/* Header */}\n      <header className=\"border-b bg-card/50 backdrop-blur-sm\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"h-10 w-10 rounded-lg bg-primary flex items-center justify-center\">\n                <Vote className=\"h-6 w-6 text-primary-foreground\" />\n              </div>\n              <div>\n                <h1 className=\"font-bold text-lg text-foreground\">ITERA Election</h1>\n                <p className=\"text-sm text-muted-foreground\">Pemilihan Presiden Mahasiswa</p>\n              </div>\n            </div>\n            <Link href=\"/login\">\n              <Button variant=\"outline\" size=\"sm\">\n                Masuk\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <main className=\"container mx-auto px-4 py-12\">\n        <div className=\"text-center mb-12\">\n          <Badge variant=\"secondary\" className=\"mb-4\">\n            Pemilihan Presiden Mahasiswa 2024\n          </Badge>\n          <h1 className=\"text-4xl md:text-6xl font-bold text-balance mb-6 text-foreground\">\n            Suaramu, <span className=\"text-primary\">Masa Depan</span> ITERA\n          </h1>\n          <p className=\"text-xl text-muted-foreground text-balance max-w-2xl mx-auto mb-8\">\n            Berpartisipasilah dalam pemilihan presiden mahasiswa ITERA 2024. Pilih pemimpin yang akan membawa perubahan\n            positif untuk kampus kita.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/login\">\n              <Button size=\"lg\" className=\"w-full sm:w-auto\">\n                Mulai Voting\n                <Vote className=\"ml-2 h-5 w-5\" />\n              </Button>\n            </Link>\n            <Button variant=\"outline\" size=\"lg\" className=\"w-full sm:w-auto bg-transparent\">\n              Pelajari Lebih Lanjut\n            </Button>\n          </div>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid md:grid-cols-3 gap-6 mb-12\">\n          <Card className=\"text-center\">\n            <CardHeader>\n              <Shield className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n              <CardTitle>Aman & Terpercaya</CardTitle>\n              <CardDescription>Sistem voting dengan keamanan tinggi dan verifikasi berlapis</CardDescription>\n            </CardHeader>\n          </Card>\n\n          <Card className=\"text-center\">\n            <CardHeader>\n              <Users className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n              <CardTitle>Mudah Digunakan</CardTitle>\n              <CardDescription>Interface yang sederhana dan mudah dipahami untuk semua mahasiswa</CardDescription>\n            </CardHeader>\n          </Card>\n\n          <Card className=\"text-center\">\n            <CardHeader>\n              <Clock className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n              <CardTitle>Real-time</CardTitle>\n              <CardDescription>Hasil voting dapat dipantau secara real-time dengan transparansi penuh</CardDescription>\n            </CardHeader>\n          </Card>\n        </div>\n\n        {/* How it Works */}\n        <Card className=\"mb-12\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl\">Cara Voting</CardTitle>\n            <CardDescription>Ikuti langkah-langkah sederhana berikut untuk memberikan suara Anda</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid md:grid-cols-4 gap-6\">\n              <div className=\"text-center\">\n                <div className=\"h-12 w-12 rounded-full bg-primary text-primary-foreground flex items-center justify-center mx-auto mb-4 font-bold\">\n                  1\n                </div>\n                <h3 className=\"font-semibold mb-2\">Login</h3>\n                <p className=\"text-sm text-muted-foreground\">Masuk dengan akun mahasiswa ITERA Anda</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"h-12 w-12 rounded-full bg-primary text-primary-foreground flex items-center justify-center mx-auto mb-4 font-bold\">\n                  2\n                </div>\n                <h3 className=\"font-semibold mb-2\">Registrasi</h3>\n                <p className=\"text-sm text-muted-foreground\">Lengkapi data diri dan dapatkan kode QR</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"h-12 w-12 rounded-full bg-primary text-primary-foreground flex items-center justify-center mx-auto mb-4 font-bold\">\n                  3\n                </div>\n                <h3 className=\"font-semibold mb-2\">Validasi</h3>\n                <p className=\"text-sm text-muted-foreground\">Tunjukkan QR code ke panitia untuk validasi</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"h-12 w-12 rounded-full bg-primary text-primary-foreground flex items-center justify-center mx-auto mb-4 font-bold\">\n                  4\n                </div>\n                <h3 className=\"font-semibold mb-2\">Vote</h3>\n                <p className=\"text-sm text-muted-foreground\">Pilih kandidat favorit Anda</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* CTA Section */}\n        <div className=\"text-center\">\n          <Card className=\"bg-primary text-primary-foreground\">\n            <CardContent className=\"py-12\">\n              <h2 className=\"text-3xl font-bold mb-4\">Siap Memberikan Suara?</h2>\n              <p className=\"text-lg mb-6 opacity-90\">\n                Bergabunglah dengan ribuan mahasiswa ITERA lainnya dalam menentukan masa depan kampus\n              </p>\n              <Link href=\"/login\">\n                <Button size=\"lg\" variant=\"secondary\">\n                  Mulai Sekarang\n                  <Vote className=\"ml-2 h-5 w-5\" />\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"border-t bg-card/50 backdrop-blur-sm mt-12\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"text-center text-muted-foreground\">\n            <p>&copy; 2024 Institut Teknologi Sumatera. All rights reserved.</p>\n            <p className=\"text-sm mt-2\">Sistem Pemilihan Presiden Mahasiswa ITERA</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  )\n}\n","size_bytes":6946},"components/candidate-management.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport { Plus, Edit, Trash2, Eye, EyeOff, AlertCircle, CheckCircle } from \"lucide-react\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport type { Candidate } from \"@/lib/types\"\n\nexport default function CandidateManagement() {\n  const [candidates, setCandidates] = useState<Candidate[]>([])\n  const [loading, setLoading] = useState(true)\n  const [saving, setSaving] = useState(false)\n  const [error, setError] = useState(\"\")\n  const [success, setSuccess] = useState(\"\")\n  const [showDialog, setShowDialog] = useState(false)\n  const [editingCandidate, setEditingCandidate] = useState<Candidate | null>(null)\n  const [formData, setFormData] = useState({\n    name: \"\",\n    nim: \"\",\n    prodi: \"\",\n    visi: \"\",\n    misi: \"\",\n    photo: \"\",\n  })\n  const supabase = createClient()\n\n  useEffect(() => {\n    loadCandidates()\n  }, [])\n\n  const loadCandidates = async () => {\n    try {\n      const { data, error } = await supabase.from(\"Candidate\").select(\"*\").order(\"name\")\n\n      if (error) {\n        setError(\"Gagal memuat data kandidat\")\n        return\n      }\n\n      setCandidates(data || [])\n    } catch (err) {\n      setError(\"Terjadi kesalahan saat memuat data\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setSaving(true)\n    setError(\"\")\n    setSuccess(\"\")\n\n    try {\n      if (editingCandidate) {\n        // Update existing candidate\n        const { error } = await supabase.from(\"Candidate\").update(formData).eq(\"id\", editingCandidate.id)\n\n        if (error) {\n          setError(\"Gagal mengupdate kandidat: \" + error.message)\n          return\n        }\n\n        setSuccess(\"Kandidat berhasil diupdate\")\n      } else {\n        // Create new candidate\n        const { error } = await supabase.from(\"Candidate\").insert(formData)\n\n        if (error) {\n          setError(\"Gagal menambah kandidat: \" + error.message)\n          return\n        }\n\n        setSuccess(\"Kandidat berhasil ditambahkan\")\n      }\n\n      setShowDialog(false)\n      setEditingCandidate(null)\n      setFormData({ name: \"\", nim: \"\", prodi: \"\", visi: \"\", misi: \"\", photo: \"\" })\n      await loadCandidates()\n    } catch (err) {\n      setError(\"Terjadi kesalahan saat menyimpan data\")\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const handleEdit = (candidate: Candidate) => {\n    setEditingCandidate(candidate)\n    setFormData({\n      name: candidate.name,\n      nim: candidate.nim,\n      prodi: candidate.prodi,\n      visi: candidate.visi,\n      misi: candidate.misi,\n      photo: candidate.photo || \"\",\n    })\n    setShowDialog(true)\n  }\n\n  const handleDelete = async (candidateId: string) => {\n    if (!confirm(\"Apakah Anda yakin ingin menghapus kandidat ini?\")) return\n\n    try {\n      const { error } = await supabase.from(\"Candidate\").delete().eq(\"id\", candidateId)\n\n      if (error) {\n        setError(\"Gagal menghapus kandidat: \" + error.message)\n        return\n      }\n\n      setSuccess(\"Kandidat berhasil dihapus\")\n      await loadCandidates()\n    } catch (err) {\n      setError(\"Terjadi kesalahan saat menghapus kandidat\")\n    }\n  }\n\n  const toggleActive = async (candidateId: string, currentStatus: boolean) => {\n    try {\n      const { error } = await supabase.from(\"Candidate\").update({ isActive: !currentStatus }).eq(\"id\", candidateId)\n\n      if (error) {\n        setError(\"Gagal mengubah status kandidat: \" + error.message)\n        return\n      }\n\n      setSuccess(`Kandidat berhasil ${!currentStatus ? \"diaktifkan\" : \"dinonaktifkan\"}`)\n      await loadCandidates()\n    } catch (err) {\n      setError(\"Terjadi kesalahan saat mengubah status\")\n    }\n  }\n\n  const resetForm = () => {\n    setFormData({ name: \"\", nim: \"\", prodi: \"\", visi: \"\", misi: \"\", photo: \"\" })\n    setEditingCandidate(null)\n    setShowDialog(false)\n  }\n\n  if (loading) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"h-8 w-8 animate-spin mx-auto mb-4 border-2 border-primary border-t-transparent rounded-full\" />\n        <p>Memuat data kandidat...</p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {error && (\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      {success && (\n        <Alert className=\"border-green-200 bg-green-50\">\n          <CheckCircle className=\"h-4 w-4 text-green-600\" />\n          <AlertDescription className=\"text-green-800\">{success}</AlertDescription>\n        </Alert>\n      )}\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>Manajemen Kandidat</CardTitle>\n              <CardDescription>Kelola data kandidat presiden mahasiswa</CardDescription>\n            </div>\n            <Dialog open={showDialog} onOpenChange={setShowDialog}>\n              <DialogTrigger asChild>\n                <Button onClick={resetForm}>\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Tambah Kandidat\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle>{editingCandidate ? \"Edit Kandidat\" : \"Tambah Kandidat Baru\"}</DialogTitle>\n                  <DialogDescription>\n                    {editingCandidate ? \"Update informasi kandidat\" : \"Masukkan informasi kandidat baru\"}\n                  </DialogDescription>\n                </DialogHeader>\n                <form onSubmit={handleSubmit}>\n                  <div className=\"grid gap-4 py-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"name\">Nama Lengkap *</Label>\n                        <Input\n                          id=\"name\"\n                          value={formData.name}\n                          onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                          required\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"nim\">NIM *</Label>\n                        <Input\n                          id=\"nim\"\n                          value={formData.nim}\n                          onChange={(e) => setFormData({ ...formData, nim: e.target.value })}\n                          required\n                        />\n                      </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"prodi\">Program Studi *</Label>\n                      <Input\n                        id=\"prodi\"\n                        value={formData.prodi}\n                        onChange={(e) => setFormData({ ...formData, prodi: e.target.value })}\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"photo\">URL Foto</Label>\n                      <Input\n                        id=\"photo\"\n                        type=\"url\"\n                        value={formData.photo}\n                        onChange={(e) => setFormData({ ...formData, photo: e.target.value })}\n                        placeholder=\"https://example.com/photo.jpg\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"visi\">Visi *</Label>\n                      <Textarea\n                        id=\"visi\"\n                        value={formData.visi}\n                        onChange={(e) => setFormData({ ...formData, visi: e.target.value })}\n                        rows={3}\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"misi\">Misi *</Label>\n                      <Textarea\n                        id=\"misi\"\n                        value={formData.misi}\n                        onChange={(e) => setFormData({ ...formData, misi: e.target.value })}\n                        rows={4}\n                        required\n                      />\n                    </div>\n                  </div>\n                  <DialogFooter>\n                    <Button type=\"button\" variant=\"outline\" onClick={resetForm}>\n                      Batal\n                    </Button>\n                    <Button type=\"submit\" disabled={saving}>\n                      {saving ? \"Menyimpan...\" : editingCandidate ? \"Update\" : \"Tambah\"}\n                    </Button>\n                  </DialogFooter>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Kandidat</TableHead>\n                  <TableHead>NIM</TableHead>\n                  <TableHead>Program Studi</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Aksi</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {candidates.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={5} className=\"text-center py-8 text-muted-foreground\">\n                      Belum ada kandidat yang terdaftar\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  candidates.map((candidate) => (\n                    <TableRow key={candidate.id}>\n                      <TableCell>\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"relative w-10 h-10\">\n                            <img\n                              src={candidate.photo || \"/placeholder.svg?height=40&width=40\"}\n                              alt={candidate.name}\n                              className=\"w-full h-full rounded-full object-cover\"\n                            />\n                          </div>\n                          <div>\n                            <p className=\"font-semibold\">{candidate.name}</p>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>{candidate.nim}</TableCell>\n                      <TableCell>{candidate.prodi}</TableCell>\n                      <TableCell>\n                        <Badge variant={candidate.isActive ? \"default\" : \"secondary\"}>\n                          {candidate.isActive ? \"Aktif\" : \"Nonaktif\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => handleEdit(candidate)}>\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => toggleActive(candidate.id, candidate.isActive)}\n                          >\n                            {candidate.isActive ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => handleDelete(candidate.id)}>\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":12636},"components/qr-code-display.tsx":{"content":"\"use client\"\n\nimport { useEffect, useRef } from \"react\"\nimport QRCode from \"qrcode\"\n\ninterface QRCodeDisplayProps {\n  value: string\n  size?: number\n  className?: string\n}\n\nexport default function QRCodeDisplay({ value, size = 200, className }: QRCodeDisplayProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n\n  useEffect(() => {\n    if (canvasRef.current && value) {\n      QRCode.toCanvas(canvasRef.current, value, {\n        width: size,\n        margin: 2,\n        color: {\n          dark: \"#000000\",\n          light: \"#FFFFFF\",\n        },\n      })\n    }\n  }, [value, size])\n\n  return (\n    <div className={`inline-block p-4 bg-white rounded-lg shadow-sm ${className}`}>\n      <canvas ref={canvasRef} />\n    </div>\n  )\n}\n","size_bytes":731},"components/qr-scanner.tsx":{"content":"\"use client\"\n\nimport { useEffect, useRef, useState } from \"react\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Button } from \"@/components/ui/button\"\nimport { Camera, CameraOff } from \"@/lib/icons\"\n\ninterface QRScannerProps {\n  onScan: (data: string) => void\n  onError: (error: string) => void\n}\n\nexport default function QRScanner({ onScan, onError }: QRScannerProps) {\n  const videoRef = useRef<HTMLVideoElement>(null)\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const [isScanning, setIsScanning] = useState(false)\n  const [stream, setStream] = useState<MediaStream | null>(null)\n  const [error, setError] = useState(\"\")\n\n  useEffect(() => {\n    startCamera()\n    return () => {\n      stopCamera()\n    }\n  }, [])\n\n  const startCamera = async () => {\n    try {\n      const mediaStream = await navigator.mediaDevices.getUserMedia({\n        video: { facingMode: \"environment\" }, // Use back camera if available\n      })\n      setStream(mediaStream)\n      if (videoRef.current) {\n        videoRef.current.srcObject = mediaStream\n        videoRef.current.play()\n        setIsScanning(true)\n        startScanning()\n      }\n    } catch (err) {\n      setError(\"Tidak dapat mengakses kamera. Pastikan izin kamera telah diberikan.\")\n      onError(\"Tidak dapat mengakses kamera\")\n    }\n  }\n\n  const stopCamera = () => {\n    if (stream) {\n      stream.getTracks().forEach((track) => track.stop())\n      setStream(null)\n    }\n    setIsScanning(false)\n  }\n\n  const startScanning = () => {\n    const scanInterval = setInterval(() => {\n      if (videoRef.current && canvasRef.current && isScanning) {\n        const video = videoRef.current\n        const canvas = canvasRef.current\n        const context = canvas.getContext(\"2d\")\n\n        if (context && video.readyState === video.HAVE_ENOUGH_DATA) {\n          canvas.width = video.videoWidth\n          canvas.height = video.videoHeight\n          context.drawImage(video, 0, 0, canvas.width, canvas.height)\n\n          const imageData = context.getImageData(0, 0, canvas.width, canvas.height)\n\n          // Simple QR code detection simulation\n          // In a real implementation, you would use a QR code library like jsQR\n          try {\n            // This is a placeholder - you would integrate with jsQR or similar library\n            // For demo purposes, we'll simulate QR detection\n            const mockQRData = detectMockQR(imageData)\n            if (mockQRData) {\n              onScan(mockQRData)\n              clearInterval(scanInterval)\n              stopCamera()\n            }\n          } catch (err) {\n            // Continue scanning\n          }\n        }\n      }\n    }, 500)\n\n    return () => clearInterval(scanInterval)\n  }\n\n  // Mock QR detection for demo purposes\n  // In production, replace this with actual QR code detection library\n  const detectMockQR = (imageData: ImageData): string | null => {\n    // This is just a placeholder\n    // In real implementation, use jsQR library:\n    // const code = jsQR(imageData.data, imageData.width, imageData.height);\n    // return code ? code.data : null;\n    return null\n  }\n\n  const handleManualInput = () => {\n    // For demo purposes, simulate a successful QR scan\n    const mockQRData = JSON.stringify({\n      userId: \"demo-user-id\",\n      redeemCode: \"DEMO1234\",\n      timestamp: Date.now(),\n    })\n    onScan(mockQRData)\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {error && (\n        <Alert variant=\"destructive\">\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      <div className=\"relative\">\n        <video\n          ref={videoRef}\n          className=\"w-full max-w-md mx-auto rounded-lg bg-black\"\n          style={{ aspectRatio: \"1/1\" }}\n          playsInline\n          muted\n        />\n        <canvas ref={canvasRef} className=\"hidden\" />\n\n        {isScanning && (\n          <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n            <div className=\"w-48 h-48 border-2 border-primary rounded-lg\">\n              <div className=\"w-full h-full border border-dashed border-primary/50 rounded-lg animate-pulse\" />\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"flex gap-2 justify-center\">\n        {isScanning ? (\n          <Button variant=\"outline\" onClick={stopCamera}>\n            <CameraOff className=\"mr-2 h-4 w-4\" />\n            Stop Camera\n          </Button>\n        ) : (\n          <Button onClick={startCamera}>\n            <Camera className=\"mr-2 h-4 w-4\" />\n            Start Camera\n          </Button>\n        )}\n\n        {/* Demo button for testing */}\n        <Button variant=\"secondary\" onClick={handleManualInput}>\n          Demo Scan\n        </Button>\n      </div>\n\n      <div className=\"text-center text-sm text-muted-foreground\">\n        <p>Arahkan kamera ke QR code mahasiswa</p>\n        <p>Pastikan QR code berada dalam frame kotak</p>\n      </div>\n    </div>\n  )\n}\n","size_bytes":4952},"components/system-settings.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Settings, Save, AlertCircle, CheckCircle } from \"lucide-react\"\nimport { createClient } from \"@/lib/supabase/client\"\n\ninterface SystemSetting {\n  key: string\n  value: string\n  description?: string\n}\n\nexport default function SystemSettings() {\n  const [settings, setSettings] = useState<SystemSetting[]>([])\n  const [loading, setLoading] = useState(true)\n  const [saving, setSaving] = useState(false)\n  const [error, setError] = useState(\"\")\n  const [success, setSuccess] = useState(\"\")\n  const supabase = createClient()\n\n  useEffect(() => {\n    loadSettings()\n  }, [])\n\n  const loadSettings = async () => {\n    try {\n      const { data, error } = await supabase.from(\"Settings\").select(\"*\").order(\"key\")\n\n      if (error) {\n        setError(\"Gagal memuat pengaturan sistem\")\n        return\n      }\n\n      setSettings(data || [])\n    } catch (err) {\n      setError(\"Terjadi kesalahan saat memuat pengaturan\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const updateSetting = async (key: string, value: string) => {\n    try {\n      const { error } = await supabase.from(\"Settings\").update({ value }).eq(\"key\", key)\n\n      if (error) {\n        setError(\"Gagal mengupdate pengaturan: \" + error.message)\n        return\n      }\n\n      // Update local state\n      setSettings((prev) => prev.map((setting) => (setting.key === key ? { ...setting, value } : setting)))\n    } catch (err) {\n      setError(\"Terjadi kesalahan saat mengupdate pengaturan\")\n    }\n  }\n\n  const handleSaveAll = async () => {\n    setSaving(true)\n    setError(\"\")\n    setSuccess(\"\")\n\n    try {\n      // Update all settings\n      for (const setting of settings) {\n        const { error } = await supabase.from(\"Settings\").update({ value: setting.value }).eq(\"key\", setting.key)\n\n        if (error) {\n          setError(\"Gagal menyimpan pengaturan: \" + error.message)\n          return\n        }\n      }\n\n      setSuccess(\"Semua pengaturan berhasil disimpan\")\n    } catch (err) {\n      setError(\"Terjadi kesalahan saat menyimpan pengaturan\")\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const getSetting = (key: string) => {\n    return settings.find((s) => s.key === key)?.value || \"\"\n  }\n\n  const updateLocalSetting = (key: string, value: string) => {\n    setSettings((prev) => prev.map((setting) => (setting.key === key ? { ...setting, value } : setting)))\n  }\n\n  if (loading) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"h-8 w-8 animate-spin mx-auto mb-4 border-2 border-primary border-t-transparent rounded-full\" />\n        <p>Memuat pengaturan sistem...</p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {error && (\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      {success && (\n        <Alert className=\"border-green-200 bg-green-50\">\n          <CheckCircle className=\"h-4 w-4 text-green-600\" />\n          <AlertDescription className=\"text-green-800\">{success}</AlertDescription>\n        </Alert>\n      )}\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Settings className=\"h-5 w-5\" />\n                Pengaturan Sistem\n              </CardTitle>\n              <CardDescription>Konfigurasi sistem pemilihan</CardDescription>\n            </div>\n            <Button onClick={handleSaveAll} disabled={saving}>\n              <Save className=\"mr-2 h-4 w-4\" />\n              {saving ? \"Menyimpan...\" : \"Simpan Semua\"}\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-6\">\n            {/* Voting Control */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Kontrol Voting</h3>\n              <div className=\"grid gap-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Aktifkan Voting</Label>\n                    <p className=\"text-sm text-muted-foreground\">Mengizinkan mahasiswa untuk memberikan suara</p>\n                  </div>\n                  <Switch\n                    checked={getSetting(\"voting_enabled\") === \"true\"}\n                    onCheckedChange={(checked) => updateLocalSetting(\"voting_enabled\", checked.toString())}\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Aktifkan Registrasi</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Mengizinkan mahasiswa untuk mendaftar sebagai pemilih\n                    </p>\n                  </div>\n                  <Switch\n                    checked={getSetting(\"registration_enabled\") === \"true\"}\n                    onCheckedChange={(checked) => updateLocalSetting(\"registration_enabled\", checked.toString())}\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Voting Period */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Periode Voting</h3>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"voting_start\">Tanggal Mulai</Label>\n                  <Input\n                    id=\"voting_start\"\n                    type=\"datetime-local\"\n                    value={getSetting(\"voting_start_date\").replace(\"Z\", \"\")}\n                    onChange={(e) => updateLocalSetting(\"voting_start_date\", e.target.value + \"Z\")}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"voting_end\">Tanggal Berakhir</Label>\n                  <Input\n                    id=\"voting_end\"\n                    type=\"datetime-local\"\n                    value={getSetting(\"voting_end_date\").replace(\"Z\", \"\")}\n                    onChange={(e) => updateLocalSetting(\"voting_end_date\", e.target.value + \"Z\")}\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* QR Code Settings */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Pengaturan QR Code</h3>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"qr_expiry\">Waktu Expired QR (menit)</Label>\n                  <Input\n                    id=\"qr_expiry\"\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"60\"\n                    value={getSetting(\"qr_expiry_minutes\")}\n                    onChange={(e) => updateLocalSetting(\"qr_expiry_minutes\", e.target.value)}\n                  />\n                  <p className=\"text-sm text-muted-foreground\">QR code akan expired setelah waktu ini</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"max_votes\">Maksimal Vote per User</Label>\n                  <Input\n                    id=\"max_votes\"\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"5\"\n                    value={getSetting(\"max_votes_per_user\")}\n                    onChange={(e) => updateLocalSetting(\"max_votes_per_user\", e.target.value)}\n                  />\n                  <p className=\"text-sm text-muted-foreground\">Jumlah maksimal vote yang dapat diberikan per user</p>\n                </div>\n              </div>\n            </div>\n\n            {/* System Status */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Status Sistem</h3>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-600\">\n                        {getSetting(\"voting_enabled\") === \"true\" ? \"AKTIF\" : \"NONAKTIF\"}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">Status Voting</p>\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-blue-600\">\n                        {getSetting(\"registration_enabled\") === \"true\" ? \"AKTIF\" : \"NONAKTIF\"}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">Status Registrasi</p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":9397},"components/theme-provider.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport {\n  ThemeProvider as NextThemesProvider,\n  type ThemeProviderProps,\n} from 'next-themes'\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n","size_bytes":292},"components/user-management.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Search, RefreshCw, UserCheck, UserX } from \"lucide-react\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport type { User } from \"@/lib/types\"\n\nexport default function UserManagement() {\n  const [users, setUsers] = useState<User[]>([])\n  const [filteredUsers, setFilteredUsers] = useState<User[]>([])\n  const [loading, setLoading] = useState(true)\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [roleFilter, setRoleFilter] = useState(\"all\")\n  const [statusFilter, setStatusFilter] = useState(\"all\")\n  const supabase = createClient()\n\n  useEffect(() => {\n    loadUsers()\n  }, [])\n\n  useEffect(() => {\n    filterUsers()\n  }, [users, searchTerm, roleFilter, statusFilter])\n\n  const loadUsers = async () => {\n    try {\n      const { data, error } = await supabase.from(\"User\").select(\"*\").order(\"createdAt\", { ascending: false })\n\n      if (error) {\n        console.error(\"Error loading users:\", error)\n        return\n      }\n\n      setUsers(data || [])\n    } catch (err) {\n      console.error(\"Error:\", err)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const filterUsers = () => {\n    let filtered = users\n\n    // Search filter\n    if (searchTerm) {\n      filtered = filtered.filter(\n        (user) =>\n          user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          user.nim.includes(searchTerm) ||\n          user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          user.prodi.toLowerCase().includes(searchTerm.toLowerCase()),\n      )\n    }\n\n    // Role filter\n    if (roleFilter !== \"all\") {\n      filtered = filtered.filter((user) => user.role === roleFilter)\n    }\n\n    // Status filter\n    if (statusFilter !== \"all\") {\n      if (statusFilter === \"voted\") {\n        filtered = filtered.filter((user) => user.hasVoted)\n      } else if (statusFilter === \"not-voted\") {\n        filtered = filtered.filter((user) => !user.hasVoted)\n      }\n    }\n\n    setFilteredUsers(filtered)\n  }\n\n  const updateUserRole = async (userId: string, newRole: string) => {\n    try {\n      const { error } = await supabase.from(\"User\").update({ role: newRole }).eq(\"id\", userId)\n\n      if (error) {\n        console.error(\"Error updating user role:\", error)\n        return\n      }\n\n      await loadUsers()\n    } catch (err) {\n      console.error(\"Error:\", err)\n    }\n  }\n\n  const getRoleBadgeVariant = (role: string) => {\n    switch (role) {\n      case \"SUPER_ADMIN\":\n        return \"destructive\"\n      case \"ADMIN\":\n        return \"secondary\"\n      default:\n        return \"outline\"\n    }\n  }\n\n  const getStatusBadgeVariant = (hasVoted: boolean) => {\n    return hasVoted ? \"default\" : \"secondary\"\n  }\n\n  if (loading) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"h-8 w-8 animate-spin mx-auto mb-4 border-2 border-primary border-t-transparent rounded-full\" />\n        <p>Memuat data pengguna...</p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>Manajemen Pengguna</CardTitle>\n              <CardDescription>Kelola data pengguna dan hak akses sistem</CardDescription>\n            </div>\n            <Button onClick={loadUsers} variant=\"outline\">\n              <RefreshCw className=\"mr-2 h-4 w-4\" />\n              Refresh\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {/* Filters */}\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <div className=\"flex items-center space-x-2 flex-1\">\n                <Search className=\"h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Cari berdasarkan nama, NIM, email, atau prodi...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                />\n              </div>\n              <Select value={roleFilter} onValueChange={setRoleFilter}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue placeholder=\"Filter Role\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Semua Role</SelectItem>\n                  <SelectItem value=\"VOTER\">Voter</SelectItem>\n                  <SelectItem value=\"ADMIN\">Admin</SelectItem>\n                  <SelectItem value=\"SUPER_ADMIN\">Super Admin</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue placeholder=\"Filter Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Semua Status</SelectItem>\n                  <SelectItem value=\"voted\">Sudah Vote</SelectItem>\n                  <SelectItem value=\"not-voted\">Belum Vote</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"bg-muted/50 p-4 rounded-lg\">\n                <div className=\"text-2xl font-bold\">{users.length}</div>\n                <div className=\"text-sm text-muted-foreground\">Total Pengguna</div>\n              </div>\n              <div className=\"bg-muted/50 p-4 rounded-lg\">\n                <div className=\"text-2xl font-bold\">{users.filter((u) => u.role === \"VOTER\").length}</div>\n                <div className=\"text-sm text-muted-foreground\">Pemilih</div>\n              </div>\n              <div className=\"bg-muted/50 p-4 rounded-lg\">\n                <div className=\"text-2xl font-bold\">{users.filter((u) => u.hasVoted).length}</div>\n                <div className=\"text-sm text-muted-foreground\">Sudah Vote</div>\n              </div>\n              <div className=\"bg-muted/50 p-4 rounded-lg\">\n                <div className=\"text-2xl font-bold\">\n                  {users.filter((u) => u.role === \"ADMIN\" || u.role === \"SUPER_ADMIN\").length}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Admin</div>\n              </div>\n            </div>\n\n            {/* Users Table */}\n            <div className=\"rounded-md border\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Pengguna</TableHead>\n                    <TableHead>NIM</TableHead>\n                    <TableHead>Program Studi</TableHead>\n                    <TableHead>Role</TableHead>\n                    <TableHead>Status Vote</TableHead>\n                    <TableHead>Aksi</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredUsers.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                        Tidak ada pengguna yang ditemukan\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    filteredUsers.map((user) => (\n                      <TableRow key={user.id}>\n                        <TableCell>\n                          <div>\n                            <p className=\"font-semibold\">{user.name}</p>\n                            <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                          </div>\n                        </TableCell>\n                        <TableCell>{user.nim}</TableCell>\n                        <TableCell>{user.prodi}</TableCell>\n                        <TableCell>\n                          <Badge variant={getRoleBadgeVariant(user.role)}>{user.role}</Badge>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={getStatusBadgeVariant(user.hasVoted)}>\n                            {user.hasVoted ? (\n                              <>\n                                <UserCheck className=\"mr-1 h-3 w-3\" />\n                                Sudah Vote\n                              </>\n                            ) : (\n                              <>\n                                <UserX className=\"mr-1 h-3 w-3\" />\n                                Belum Vote\n                              </>\n                            )}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <Select\n                            value={user.role}\n                            onValueChange={(newRole) => updateUserRole(user.id, newRole)}\n                            disabled={user.role === \"SUPER_ADMIN\"}\n                          >\n                            <SelectTrigger className=\"w-32\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"VOTER\">Voter</SelectItem>\n                              <SelectItem value=\"ADMIN\">Admin</SelectItem>\n                              <SelectItem value=\"SUPER_ADMIN\">Super Admin</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":10059},"hooks/use-mobile.ts":{"content":"import * as React from 'react'\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener('change', onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener('change', onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"hooks/use-toast.ts":{"content":"'use client'\n\n// Inspired by react-hot-toast library\nimport * as React from 'react'\n\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast'\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: 'ADD_TOAST',\n  UPDATE_TOAST: 'UPDATE_TOAST',\n  DISMISS_TOAST: 'DISMISS_TOAST',\n  REMOVE_TOAST: 'REMOVE_TOAST',\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType['ADD_TOAST']\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType['UPDATE_TOAST']\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType['DISMISS_TOAST']\n      toastId?: ToasterToast['id']\n    }\n  | {\n      type: ActionType['REMOVE_TOAST']\n      toastId?: ToasterToast['id']\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: 'REMOVE_TOAST',\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ADD_TOAST':\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case 'UPDATE_TOAST':\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      }\n\n    case 'DISMISS_TOAST': {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      }\n    }\n    case 'REMOVE_TOAST':\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, 'id'>\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: 'UPDATE_TOAST',\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id })\n\n  dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3945},"lib/auth.ts":{"content":"import { createClient } from \"@/lib/supabase/server\"\nimport type { User } from \"@/lib/types\"\n\nexport async function getCurrentUser(): Promise<User | null> {\n  const supabase = await createClient()\n\n  const {\n    data: { user },\n    error,\n  } = await supabase.auth.getUser()\n\n  if (error || !user) {\n    return null\n  }\n\n  const { data: userData, error: userError } = await supabase.from(\"User\").select(\"*\").eq(\"email\", user.email).single()\n\n  if (userError || !userData) {\n    return null\n  }\n\n  return userData\n}\n\nexport async function requireAuth() {\n  const user = await getCurrentUser()\n  if (!user) {\n    throw new Error(\"Authentication required\")\n  }\n  return user\n}\n\nexport async function requireRole(allowedRoles: string[]) {\n  const user = await requireAuth()\n  if (!allowedRoles.includes(user.role)) {\n    throw new Error(\"Insufficient permissions\")\n  }\n  return user\n}\n","size_bytes":881},"lib/cva.ts":{"content":"type VariantConfig = {\n  variants?: Record<string, Record<string, string>>\n  defaultVariants?: Record<string, string>\n}\n\nexport function cva(base: string, config?: VariantConfig) {\n  return (props?: Record<string, string | undefined>) => {\n    let classes = base\n\n    if (config?.variants && props) {\n      Object.entries(props).forEach(([key, value]) => {\n        if (value && config.variants?.[key]?.[value]) {\n          classes += \" \" + config.variants[key][value]\n        }\n      })\n    }\n\n    // Apply default variants if no value provided\n    if (config?.defaultVariants) {\n      Object.entries(config.defaultVariants).forEach(([key, defaultValue]) => {\n        if (!props?.[key] && config.variants?.[key]?.[defaultValue]) {\n          classes += \" \" + config.variants[key][defaultValue]\n        }\n      })\n    }\n\n    return classes\n  }\n}\n\nexport type VariantProps<T extends (...args: any) => any> = {\n  [K in keyof Parameters<T>[0]]?: Parameters<T>[0][K]\n}\n","size_bytes":963},"lib/icons.tsx":{"content":"interface IconProps {\n  className?: string\n  size?: number\n}\n\nexport const Vote = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <path d=\"M9 11H5a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7a2 2 0 0 0-2-2h-4\" />\n    <path d=\"M9 11V9a3 3 0 0 1 6 0v2\" />\n  </svg>\n)\n\nexport const Users = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <path d=\"M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2\" />\n    <circle cx=\"9\" cy=\"7\" r=\"4\" />\n    <path d=\"M22 21v-2a4 4 0 0 0-3-3.87\" />\n    <path d=\"M16 3.13a4 4 0 0 1 0 7.75\" />\n  </svg>\n)\n\nexport const User = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\" />\n    <circle cx=\"12\" cy=\"7\" r=\"4\" />\n  </svg>\n)\n\nexport const Shield = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <path d=\"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z\" />\n  </svg>\n)\n\nexport const Clock = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <circle cx=\"12\" cy=\"12\" r=\"10\" />\n    <polyline points=\"12,6 12,12 16,14\" />\n  </svg>\n)\n\nexport const ArrowLeft = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <path d=\"M19 12H5\" />\n    <path d=\"M12 19l-7-7 7-7\" />\n  </svg>\n)\n\nexport const Loader2 = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <path d=\"M21 12a9 9 0 1 1-6.219-8.56\" />\n  </svg>\n)\n\nexport const CheckCircle = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\" />\n    <polyline points=\"22,4 12,14.01 9,11.01\" />\n  </svg>\n)\n\nexport const AlertCircle = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <circle cx=\"12\" cy=\"12\" r=\"10\" />\n    <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\" />\n    <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\" />\n  </svg>\n)\n\nexport const QrCode = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <rect width=\"5\" height=\"5\" x=\"3\" y=\"3\" rx=\"1\" />\n    <rect width=\"5\" height=\"5\" x=\"16\" y=\"3\" rx=\"1\" />\n    <rect width=\"5\" height=\"5\" x=\"3\" y=\"16\" rx=\"1\" />\n    <path d=\"M21 16h-3a2 2 0 0 0-2 2v3\" />\n    <path d=\"M21 21v.01\" />\n    <path d=\"M12 7v3a2 2 0 0 1-2 2H7\" />\n    <path d=\"M3 12h.01\" />\n    <path d=\"M12 3h.01\" />\n    <path d=\"M12 16v.01\" />\n    <path d=\"M16 12h1\" />\n    <path d=\"M21 12v.01\" />\n    <path d=\"M12 21v-1\" />\n  </svg>\n)\n\nexport const RefreshCw = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\" />\n    <path d=\"M21 3v5h-5\" />\n    <path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\" />\n    <path d=\"M8 16H3v5\" />\n  </svg>\n)\n\nexport const Eye = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\" />\n    <circle cx=\"12\" cy=\"12\" r=\"3\" />\n  </svg>\n)\n\nexport const EyeOff = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <path d=\"M9.88 9.88a3 3 0 1 0 4.24 4.24\" />\n    <path d=\"M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 11 8 11 8a13.16 13.16 0 0 1-1.67 2.68\" />\n    <path d=\"M6.61 6.61A13.526 13.526 0 0 0 1 12s4 8 11 8a9.74 9.74 0 0 0 5.39-1.61\" />\n    <line x1=\"2\" y1=\"2\" x2=\"22\" y2=\"22\" />\n  </svg>\n)\n\nexport const Calendar = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\" />\n    <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\" />\n    <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\" />\n    <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\" />\n  </svg>\n)\n\nexport const LogOut = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\" />\n    <polyline points=\"16,17 21,12 16,7\" />\n    <line x1=\"21\" y1=\"12\" x2=\"9\" y2=\"12\" />\n  </svg>\n)\n\nexport const Camera = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <path d=\"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z\" />\n    <circle cx=\"12\" cy=\"13\" r=\"4\" />\n  </svg>\n)\n\nexport const CameraOff = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\" />\n    <path d=\"M21 21H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3m3-3h6l2 3h4a2 2 0 0 1 2 2v9.34m-7.72-2.06a4 4 0 1 1-5.56-5.56\" />\n  </svg>\n)\n\nexport const Search = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <circle cx=\"11\" cy=\"11\" r=\"8\" />\n    <path d=\"M21 21l-4.35-4.35\" />\n  </svg>\n)\n\nexport const X = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <path d=\"M18 6 6 18\" />\n    <path d=\"M6 6l12 12\" />\n  </svg>\n)\n\nexport const Check = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <polyline points=\"20,6 9,17 4,12\" />\n  </svg>\n)\n\nexport const ChevronDown = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <polyline points=\"6,9 12,15 18,9\" />\n  </svg>\n)\n\nexport const ChevronUp = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <polyline points=\"18,15 12,9 6,15\" />\n  </svg>\n)\n\nexport const ChevronRight = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <polyline points=\"9,18 15,12 9,6\" />\n  </svg>\n)\n\nexport const ChevronDownIcon = ChevronDown\nexport const CheckIcon = Check\nexport const XIcon = X\nexport const SearchIcon = Search\nexport const CircleIcon = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg className={className} width={size} height={size} viewBox=\"0 0 24 24\" fill=\"currentColor\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\" />\n  </svg>\n)\n\nexport const MoreHorizontal = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <circle cx=\"12\" cy=\"12\" r=\"1\" />\n    <circle cx=\"19\" cy=\"12\" r=\"1\" />\n    <circle cx=\"5\" cy=\"12\" r=\"1\" />\n  </svg>\n)\n\nexport const MinusIcon = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />\n  </svg>\n)\n\nexport const GripVerticalIcon = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <circle cx=\"9\" cy=\"12\" r=\"1\" />\n    <circle cx=\"9\" cy=\"5\" r=\"1\" />\n    <circle cx=\"9\" cy=\"19\" r=\"1\" />\n    <circle cx=\"15\" cy=\"12\" r=\"1\" />\n    <circle cx=\"15\" cy=\"5\" r=\"1\" />\n    <circle cx=\"15\" cy=\"19\" r=\"1\" />\n  </svg>\n)\n\nexport const PanelLeftIcon = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" rx=\"2\" ry=\"2\" />\n    <line x1=\"9\" y1=\"3\" x2=\"9\" y2=\"21\" />\n  </svg>\n)\n\n// Additional icons for the application\nexport const Plus = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\" />\n    <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />\n  </svg>\n)\n\nexport const Edit = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\" />\n    <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\" />\n  </svg>\n)\n\nexport const Trash2 = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <polyline points=\"3,6 5,6 21,6\" />\n    <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\" />\n    <line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\" />\n    <line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\" />\n  </svg>\n)\n\nexport const Settings = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <circle cx=\"12\" cy=\"12\" r=\"3\" />\n    <path d=\"M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1 1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z\" />\n  </svg>\n)\n\nexport const Save = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <path d=\"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z\" />\n    <polyline points=\"17,21 17,13 7,13 7,21\" />\n    <polyline points=\"7,3 7,8 15,8\" />\n  </svg>\n)\n\nexport const UserCheck = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <path d=\"M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2\" />\n    <circle cx=\"9\" cy=\"7\" r=\"4\" />\n    <polyline points=\"16,11 18,13 22,9\" />\n  </svg>\n)\n\nexport const UserX = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <path d=\"M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2\" />\n    <circle cx=\"9\" cy=\"7\" r=\"4\" />\n    <line x1=\"17\" y1=\"8\" x2=\"22\" y2=\"13\" />\n    <line x1=\"22\" y1=\"8\" x2=\"17\" y2=\"13\" />\n  </svg>\n)\n\nexport const TrendingUp = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <polyline points=\"22,7 13.5,15.5 8.5,10.5 2,17\" />\n    <polyline points=\"16,7 22,7 22,13\" />\n  </svg>\n)\n\nexport const Download = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\" />\n    <polyline points=\"7,10 12,15 17,10\" />\n    <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\" />\n  </svg>\n)\n\nexport const Scan = ({ className = \"h-4 w-4\", size }: IconProps) => (\n  <svg\n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n  >\n    <path d=\"M3 7V5a2 2 0 0 1 2-2h2\" />\n    <path d=\"M17 3h2a2 2 0 0 1 2 2v2\" />\n    <path d=\"M21 17v2a2 2 0 0 1-2 2h-2\" />\n    <path d=\"M7 21H5a2 2 0 0 1-2-2v-2\" />\n    <path d=\"M7 12h10\" />\n  </svg>\n)\n","size_bytes":14918},"lib/mock-auth.ts":{"content":"// Mock authentication utilities for testing\n\nexport interface MockUser {\n  email: string\n  password: string\n  role: \"SUPER_ADMIN\" | \"ADMIN\" | \"VOTER\"\n  name: string\n  nim?: string\n  prodi?: string\n  hasVoted: boolean\n  id?: string\n}\n\n// Get current mock user from localStorage\nexport function getMockUser(): MockUser | null {\n  if (typeof window === \"undefined\") return null\n\n  try {\n    const userData = localStorage.getItem(\"mockUser\")\n    return userData ? JSON.parse(userData) : null\n  } catch {\n    return null\n  }\n}\n\n// Set mock user in localStorage\nexport function setMockUser(user: MockUser): void {\n  if (typeof window === \"undefined\") return\n\n  localStorage.setItem(\"mockUser\", JSON.stringify(user))\n}\n\n// Clear mock user session\nexport function clearMockUser(): void {\n  if (typeof window === \"undefined\") return\n\n  localStorage.removeItem(\"mockUser\")\n}\n\n// Check if user is authenticated\nexport function isAuthenticated(): boolean {\n  return getMockUser() !== null\n}\n\n// Check if user has specific role\nexport function hasRole(role: MockUser[\"role\"]): boolean {\n  const user = getMockUser()\n  return user?.role === role\n}\n\n// Mock database operations for testing\nexport const mockDatabase = {\n  // Mock candidates data\n  candidates: [\n    {\n      id: \"1\",\n      name: \"Ahmad Rizki Pratama\",\n      nim: \"121450001\",\n      prodi: \"Teknik Informatika\",\n      visi: \"Mewujudkan ITERA yang lebih maju, inovatif, dan berprestasi dengan mengedepankan kolaborasi antar mahasiswa dari berbagai fakultas.\",\n      misi: \"Meningkatkan fasilitas kampus, mengoptimalkan program kemahasiswaan, dan memperkuat hubungan dengan industri untuk mempersiapkan mahasiswa menghadapi dunia kerja.\",\n      photo: \"/placeholder.svg?height=400&width=400\",\n      isActive: true,\n    },\n    {\n      id: \"2\",\n      name: \"Sari Indah Permata\",\n      nim: \"121450002\",\n      prodi: \"Teknik Sipil\",\n      visi: \"Membangun ITERA yang inklusif, berkelanjutan, dan berdaya saing tinggi melalui pemberdayaan potensi mahasiswa di segala bidang.\",\n      misi: \"Mengembangkan program kewirausahaan mahasiswa, meningkatkan kualitas organisasi kemahasiswaan, dan memperkuat jaringan alumni untuk mendukung karir mahasiswa.\",\n      photo: \"/placeholder.svg?height=400&width=400\",\n      isActive: true,\n    },\n    {\n      id: \"3\",\n      name: \"Muhammad Fajar Sidiq\",\n      nim: \"121450003\",\n      prodi: \"Teknik Elektro\",\n      visi: \"Menciptakan ekosistem kampus yang mendukung inovasi, kreativitas, dan pengembangan soft skills mahasiswa untuk menghadapi era digital.\",\n      misi: \"Digitalisasi layanan kemahasiswaan, pengembangan program magang dan pertukaran mahasiswa, serta peningkatan kualitas kegiatan ekstrakurikuler.\",\n      photo: \"/placeholder.svg?height=400&width=400\",\n      isActive: true,\n    },\n  ],\n\n  // Mock voting session\n  votingSession: null as any,\n\n  // Mock vote storage\n  votes: [] as any[],\n\n  // Generate mock QR code\n  generateQRCode: () => {\n    const user = getMockUser()\n    if (!user) return null\n\n    const redeemCode = Math.random().toString(36).substring(2, 10).toUpperCase()\n    const qrData = JSON.stringify({\n      userId: user.email,\n      redeemCode,\n      timestamp: Date.now(),\n    })\n\n    const session = {\n      id: Date.now().toString(),\n      userId: user.email,\n      qrCode: qrData,\n      redeemCode,\n      expiresAt: new Date(Date.now() + 15 * 60 * 1000).toISOString(),\n      isValidated: false,\n      isUsed: false,\n      createdAt: new Date().toISOString(),\n    }\n\n    mockDatabase.votingSession = session\n    return session\n  },\n\n  // Validate QR code (mock admin function)\n  validateQRCode: (redeemCode: string) => {\n    if (mockDatabase.votingSession?.redeemCode === redeemCode) {\n      mockDatabase.votingSession.isValidated = true\n      return true\n    }\n    return false\n  },\n\n  // Submit vote\n  submitVote: (candidateId: string) => {\n    const user = getMockUser()\n    if (!user || user.hasVoted) return false\n\n    // Add vote\n    mockDatabase.votes.push({\n      id: Date.now().toString(),\n      userId: user.email,\n      candidateId,\n      createdAt: new Date().toISOString(),\n    })\n\n    // Update user\n    user.hasVoted = true\n    setMockUser(user)\n\n    // Mark session as used\n    if (mockDatabase.votingSession) {\n      mockDatabase.votingSession.isUsed = true\n    }\n\n    return true\n  },\n\n  // Get voting results\n  getResults: () => {\n    const results = mockDatabase.candidates.map((candidate) => ({\n      ...candidate,\n      voteCount: mockDatabase.votes.filter((vote) => vote.candidateId === candidate.id).length,\n    }))\n\n    return results.sort((a, b) => b.voteCount - a.voteCount)\n  },\n}\n","size_bytes":4630},"lib/types.ts":{"content":"export type Role = \"VOTER\" | \"ADMIN\" | \"SUPER_ADMIN\"\n\nexport interface User {\n  id: string\n  email: string\n  nim: string\n  name: string\n  prodi: string\n  gender: string\n  phone?: string\n  role: Role\n  hasVoted: boolean\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface Candidate {\n  id: string\n  name: string\n  nim: string\n  prodi: string\n  visi: string\n  misi: string\n  photo?: string\n  isActive: boolean\n  createdAt: string\n}\n\nexport interface VotingSession {\n  id: string\n  userId: string\n  qrCode: string\n  redeemCode: string\n  isValidated: boolean\n  isUsed: boolean\n  validatedBy?: string\n  expiresAt: string\n  createdAt: string\n  user?: User\n  validator?: User\n}\n\nexport interface Vote {\n  id: string\n  userId: string\n  candidateId: string\n  createdAt: string\n  user?: User\n  candidate?: Candidate\n}\n\nexport interface AdminLog {\n  id: string\n  adminId: string\n  action: string\n  target?: string\n  details?: any\n  ipAddress?: string\n  createdAt: string\n  admin?: User\n}\n\nexport interface Settings {\n  id: string\n  key: string\n  value: string\n  description?: string\n  updatedAt: string\n}\n","size_bytes":1102},"lib/utils.ts":{"content":"import { clsx, type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"styles/globals.css":{"content":"@import 'tailwindcss';\n@import 'tw-animate-css';\n\n@custom-variant dark (&:is(.dark *));\n\n:root {\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.145 0 0);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.145 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.145 0 0);\n  --primary: oklch(0.205 0 0);\n  --primary-foreground: oklch(0.985 0 0);\n  --secondary: oklch(0.97 0 0);\n  --secondary-foreground: oklch(0.205 0 0);\n  --muted: oklch(0.97 0 0);\n  --muted-foreground: oklch(0.556 0 0);\n  --accent: oklch(0.97 0 0);\n  --accent-foreground: oklch(0.205 0 0);\n  --destructive: oklch(0.577 0.245 27.325);\n  --destructive-foreground: oklch(0.577 0.245 27.325);\n  --border: oklch(0.922 0 0);\n  --input: oklch(0.922 0 0);\n  --ring: oklch(0.708 0 0);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --radius: 0.625rem;\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: oklch(0.205 0 0);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n\n.dark {\n  --background: oklch(0.145 0 0);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.145 0 0);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.145 0 0);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.985 0 0);\n  --primary-foreground: oklch(0.205 0 0);\n  --secondary: oklch(0.269 0 0);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.269 0 0);\n  --muted-foreground: oklch(0.708 0 0);\n  --accent: oklch(0.269 0 0);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.396 0.141 25.723);\n  --destructive-foreground: oklch(0.637 0.237 25.331);\n  --border: oklch(0.269 0 0);\n  --input: oklch(0.269 0 0);\n  --ring: oklch(0.439 0 0);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.205 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.269 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(0.269 0 0);\n  --sidebar-ring: oklch(0.439 0 0);\n}\n\n@theme inline {\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-destructive-foreground: var(--destructive-foreground);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n","size_bytes":4337},"app/admin/loading.tsx":{"content":"export default function Loading() {\n  return null\n}\n","size_bytes":52},"app/admin/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { QrCode, Scan, CheckCircle, Clock, AlertCircle, LogOut, RefreshCw, Search, Camera } from \"lucide-react\"\nimport { useRouter } from \"next/navigation\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport QRScanner from \"@/components/qr-scanner\"\n\ninterface VotingSession {\n  id: string\n  userId: string\n  qrCode: string\n  redeemCode: string\n  isValidated: boolean\n  isUsed: boolean\n  validatedBy?: string\n  expiresAt: string\n  createdAt: string\n  user?: {\n    name: string\n    nim: string\n    prodi: string\n    email: string\n  }\n}\n\nexport default function AdminPage() {\n  const [admin, setAdmin] = useState<any>(null)\n  const [loading, setLoading] = useState(true)\n  const [validating, setValidating] = useState(false)\n  const [error, setError] = useState(\"\")\n  const [success, setSuccess] = useState(\"\")\n  const [manualCode, setManualCode] = useState(\"\")\n  const [showScanner, setShowScanner] = useState(false)\n  const [pendingSessions, setPendingSessions] = useState<VotingSession[]>([])\n  const [recentValidations, setRecentValidations] = useState<VotingSession[]>([])\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const router = useRouter()\n  const supabase = createClient()\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const {\n          data: { user },\n        } = await supabase.auth.getUser()\n        if (!user) {\n          router.push(\"/login\")\n          return\n        }\n\n        const { data: adminData, error: adminError } = await supabase\n          .from(\"User\")\n          .select(\"*\")\n          .eq(\"email\", user.email)\n          .single()\n\n        if (adminError || !adminData || (adminData.role !== \"ADMIN\" && adminData.role !== \"SUPER_ADMIN\")) {\n          router.push(\"/\")\n          return\n        }\n\n        setAdmin(adminData)\n        await loadData()\n      } catch (err) {\n        setError(\"Terjadi kesalahan saat memuat data\")\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    checkAuth()\n\n    // Set up real-time subscription\n    const channel = supabase\n      .channel(\"admin-voting-sessions\")\n      .on(\n        \"postgres_changes\",\n        {\n          event: \"*\",\n          schema: \"public\",\n          table: \"VotingSession\",\n        },\n        () => {\n          loadData()\n        },\n      )\n      .subscribe()\n\n    return () => {\n      supabase.removeChannel(channel)\n    }\n  }, [router, supabase])\n\n  const loadData = async () => {\n    try {\n      // Load pending sessions\n      const { data: pendingData } = await supabase\n        .from(\"VotingSession\")\n        .select(\n          `\n          *,\n          user:User(name, nim, prodi, email)\n        `,\n        )\n        .eq(\"isValidated\", false)\n        .eq(\"isUsed\", false)\n        .gte(\"expiresAt\", new Date().toISOString())\n        .order(\"createdAt\", { ascending: false })\n\n      setPendingSessions(pendingData || [])\n\n      // Load recent validations\n      const { data: recentData } = await supabase\n        .from(\"VotingSession\")\n        .select(\n          `\n          *,\n          user:User(name, nim, prodi, email)\n        `,\n        )\n        .eq(\"isValidated\", true)\n        .order(\"createdAt\", { ascending: false })\n        .limit(10)\n\n      setRecentValidations(recentData || [])\n    } catch (err) {\n      console.error(\"Error loading data:\", err)\n    }\n  }\n\n  const validateSession = async (sessionId: string, redeemCode?: string) => {\n    setValidating(true)\n    setError(\"\")\n    setSuccess(\"\")\n\n    try {\n      // Get session data\n      const { data: sessionData, error: sessionError } = await supabase\n        .from(\"VotingSession\")\n        .select(\n          `\n          *,\n          user:User(*)\n        `,\n        )\n        .eq(\"id\", sessionId)\n        .single()\n\n      if (sessionError || !sessionData) {\n        setError(\"Session tidak ditemukan\")\n        return\n      }\n\n      // Check if already validated\n      if (sessionData.isValidated) {\n        setError(\"Session sudah divalidasi sebelumnya\")\n        return\n      }\n\n      // Check if expired\n      const now = new Date()\n      const expiresAt = new Date(sessionData.expiresAt)\n      if (now > expiresAt) {\n        setError(\"Kode sudah expired\")\n        return\n      }\n\n      // Validate redeem code if provided\n      if (redeemCode && sessionData.redeemCode !== redeemCode) {\n        setError(\"Kode redeem tidak valid\")\n        return\n      }\n\n      // Update session as validated\n      const { error: updateError } = await supabase\n        .from(\"VotingSession\")\n        .update({\n          isValidated: true,\n          validatedBy: admin.id,\n        })\n        .eq(\"id\", sessionId)\n\n      if (updateError) {\n        setError(\"Gagal memvalidasi session: \" + updateError.message)\n        return\n      }\n\n      // Log admin action\n      await supabase.from(\"AdminLog\").insert({\n        adminId: admin.id,\n        action: \"VALIDATE_SESSION\",\n        target: sessionData.user?.id,\n        details: {\n          sessionId,\n          redeemCode: sessionData.redeemCode,\n          userNim: sessionData.user?.nim,\n          userName: sessionData.user?.name,\n        },\n      })\n\n      setSuccess(`Berhasil memvalidasi session untuk ${sessionData.user?.name} (${sessionData.user?.nim})`)\n      setManualCode(\"\")\n      await loadData()\n    } catch (err) {\n      setError(\"Terjadi kesalahan saat validasi\")\n    } finally {\n      setValidating(false)\n    }\n  }\n\n  const handleQRScan = async (data: string) => {\n    try {\n      const qrData = JSON.parse(data)\n      if (qrData.userId && qrData.redeemCode) {\n        // Find session by user ID and redeem code\n        const { data: sessionData } = await supabase\n          .from(\"VotingSession\")\n          .select(\"id\")\n          .eq(\"userId\", qrData.userId)\n          .eq(\"redeemCode\", qrData.redeemCode)\n          .eq(\"isValidated\", false)\n          .eq(\"isUsed\", false)\n          .single()\n\n        if (sessionData) {\n          await validateSession(sessionData.id, qrData.redeemCode)\n        } else {\n          setError(\"Session tidak ditemukan atau sudah divalidasi\")\n        }\n      } else {\n        setError(\"Format QR code tidak valid\")\n      }\n    } catch (err) {\n      setError(\"QR code tidak valid\")\n    }\n    setShowScanner(false)\n  }\n\n  const handleManualValidation = async () => {\n    if (!manualCode.trim()) {\n      setError(\"Masukkan kode redeem\")\n      return\n    }\n\n    try {\n      const { data: sessionData } = await supabase\n        .from(\"VotingSession\")\n        .select(\"id\")\n        .eq(\"redeemCode\", manualCode.trim().toUpperCase())\n        .eq(\"isValidated\", false)\n        .eq(\"isUsed\", false)\n        .single()\n\n      if (sessionData) {\n        await validateSession(sessionData.id, manualCode.trim().toUpperCase())\n      } else {\n        setError(\"Kode redeem tidak ditemukan atau sudah divalidasi\")\n      }\n    } catch (err) {\n      setError(\"Kode redeem tidak valid\")\n    }\n  }\n\n  const handleLogout = async () => {\n    await supabase.auth.signOut()\n    router.push(\"/\")\n  }\n\n  const filteredPendingSessions = pendingSessions.filter(\n    (session) =>\n      session.user?.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      session.user?.nim.includes(searchTerm) ||\n      session.redeemCode.includes(searchTerm.toUpperCase()),\n  )\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-background via-muted/30 to-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"h-8 w-8 animate-spin mx-auto mb-4 border-2 border-primary border-t-transparent rounded-full\" />\n          <p>Memuat dashboard admin...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-muted/30 to-background p-4\">\n      <div className=\"container mx-auto max-w-6xl py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"h-12 w-12 rounded-lg bg-primary flex items-center justify-center\">\n              <Scan className=\"h-7 w-7 text-primary-foreground\" />\n            </div>\n            <div>\n              <h1 className=\"font-bold text-xl text-foreground\">Admin Dashboard</h1>\n              <p className=\"text-sm text-muted-foreground\">Validasi QR Code Pemilih</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <div className=\"text-right\">\n              <p className=\"font-semibold\">{admin?.name}</p>\n              <p className=\"text-sm text-muted-foreground\">{admin?.role}</p>\n            </div>\n            <Button variant=\"outline\" onClick={handleLogout}>\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              Logout\n            </Button>\n          </div>\n        </div>\n\n        {error && (\n          <Alert variant=\"destructive\" className=\"mb-6\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {success && (\n          <Alert className=\"mb-6 border-green-200 bg-green-50\">\n            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n            <AlertDescription className=\"text-green-800\">{success}</AlertDescription>\n          </Alert>\n        )}\n\n        <Tabs defaultValue=\"scan\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"scan\">Scan QR Code</TabsTrigger>\n            <TabsTrigger value=\"pending\">Menunggu Validasi</TabsTrigger>\n            <TabsTrigger value=\"recent\">Validasi Terbaru</TabsTrigger>\n          </TabsList>\n\n          {/* QR Scanner Tab */}\n          <TabsContent value=\"scan\" className=\"space-y-6\">\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              {/* QR Scanner */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Camera className=\"h-5 w-5\" />\n                    Scan QR Code\n                  </CardTitle>\n                  <CardDescription>Gunakan kamera untuk memindai QR code mahasiswa</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {!showScanner ? (\n                      <Button onClick={() => setShowScanner(true)} className=\"w-full\" size=\"lg\">\n                        <QrCode className=\"mr-2 h-5 w-5\" />\n                        Buka Scanner\n                      </Button>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        <QRScanner onScan={handleQRScan} onError={(err) => setError(err)} />\n                        <Button variant=\"outline\" onClick={() => setShowScanner(false)} className=\"w-full\">\n                          Tutup Scanner\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Manual Input */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Search className=\"h-5 w-5\" />\n                    Input Manual\n                  </CardTitle>\n                  <CardDescription>Masukkan kode redeem secara manual jika QR tidak dapat dipindai</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"manual-code\">Kode Redeem (8 karakter)</Label>\n                      <Input\n                        id=\"manual-code\"\n                        placeholder=\"Contoh: ABC12345\"\n                        value={manualCode}\n                        onChange={(e) => setManualCode(e.target.value.toUpperCase())}\n                        maxLength={8}\n                        disabled={validating}\n                      />\n                    </div>\n                    <Button\n                      onClick={handleManualValidation}\n                      disabled={validating || !manualCode.trim()}\n                      className=\"w-full\"\n                    >\n                      {validating ? (\n                        <>\n                          <div className=\"mr-2 h-4 w-4 animate-spin border-2 border-white border-t-transparent rounded-full\" />\n                          Memvalidasi...\n                        </>\n                      ) : (\n                        <>\n                          <CheckCircle className=\"mr-2 h-4 w-4\" />\n                          Validasi Kode\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Pending Sessions Tab */}\n          <TabsContent value=\"pending\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Clock className=\"h-5 w-5\" />\n                      Menunggu Validasi ({filteredPendingSessions.length})\n                    </CardTitle>\n                    <CardDescription>Daftar mahasiswa yang menunggu validasi kode</CardDescription>\n                  </div>\n                  <Button variant=\"outline\" onClick={loadData}>\n                    <RefreshCw className=\"mr-2 h-4 w-4\" />\n                    Refresh\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Search className=\"h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      placeholder=\"Cari berdasarkan nama, NIM, atau kode redeem...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"max-w-sm\"\n                    />\n                  </div>\n\n                  <div className=\"rounded-md border\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Mahasiswa</TableHead>\n                          <TableHead>Kode Redeem</TableHead>\n                          <TableHead>Waktu Dibuat</TableHead>\n                          <TableHead>Expires</TableHead>\n                          <TableHead>Aksi</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {filteredPendingSessions.length === 0 ? (\n                          <TableRow>\n                            <TableCell colSpan={5} className=\"text-center py-8 text-muted-foreground\">\n                              Tidak ada session yang menunggu validasi\n                            </TableCell>\n                          </TableRow>\n                        ) : (\n                          filteredPendingSessions.map((session) => (\n                            <TableRow key={session.id}>\n                              <TableCell>\n                                <div>\n                                  <p className=\"font-semibold\">{session.user?.name}</p>\n                                  <p className=\"text-sm text-muted-foreground\">\n                                    {session.user?.nim} • {session.user?.prodi}\n                                  </p>\n                                </div>\n                              </TableCell>\n                              <TableCell>\n                                <Badge variant=\"outline\" className=\"font-mono\">\n                                  {session.redeemCode}\n                                </Badge>\n                              </TableCell>\n                              <TableCell>\n                                {new Date(session.createdAt).toLocaleString(\"id-ID\", {\n                                  dateStyle: \"short\",\n                                  timeStyle: \"short\",\n                                })}\n                              </TableCell>\n                              <TableCell>\n                                {new Date(session.expiresAt).toLocaleString(\"id-ID\", {\n                                  dateStyle: \"short\",\n                                  timeStyle: \"short\",\n                                })}\n                              </TableCell>\n                              <TableCell>\n                                <Button size=\"sm\" onClick={() => validateSession(session.id)} disabled={validating}>\n                                  <CheckCircle className=\"mr-2 h-4 w-4\" />\n                                  Validasi\n                                </Button>\n                              </TableCell>\n                            </TableRow>\n                          ))\n                        )}\n                      </TableBody>\n                    </Table>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Recent Validations Tab */}\n          <TabsContent value=\"recent\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"h-5 w-5\" />\n                  Validasi Terbaru ({recentValidations.length})\n                </CardTitle>\n                <CardDescription>10 validasi terakhir yang dilakukan</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"rounded-md border\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Mahasiswa</TableHead>\n                        <TableHead>Kode Redeem</TableHead>\n                        <TableHead>Waktu Validasi</TableHead>\n                        <TableHead>Status</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {recentValidations.length === 0 ? (\n                        <TableRow>\n                          <TableCell colSpan={4} className=\"text-center py-8 text-muted-foreground\">\n                            Belum ada validasi yang dilakukan\n                          </TableCell>\n                        </TableRow>\n                      ) : (\n                        recentValidations.map((session) => (\n                          <TableRow key={session.id}>\n                            <TableCell>\n                              <div>\n                                <p className=\"font-semibold\">{session.user?.name}</p>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  {session.user?.nim} • {session.user?.prodi}\n                                </p>\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant=\"outline\" className=\"font-mono\">\n                                {session.redeemCode}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              {new Date(session.createdAt).toLocaleString(\"id-ID\", {\n                                dateStyle: \"short\",\n                                timeStyle: \"short\",\n                              })}\n                            </TableCell>\n                            <TableCell>\n                              <Badge className=\"bg-green-100 text-green-800 hover:bg-green-100\">\n                                <CheckCircle className=\"mr-1 h-3 w-3\" />\n                                Tervalidasi\n                              </Badge>\n                            </TableCell>\n                          </TableRow>\n                        ))\n                      )}\n                    </TableBody>\n                  </Table>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  )\n}\n","size_bytes":20885},"app/generate-code/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { QrCode, RefreshCw, Clock, User, Loader2, CheckCircle, AlertCircle } from \"@/lib/icons\"\nimport { useRouter } from \"next/navigation\"\nimport QRCodeDisplay from \"@/components/qr-code-display\"\nimport { getMockUser, mockDatabase } from \"@/lib/mock-auth\"\n\nexport default function GenerateCodePage() {\n  const [user, setUser] = useState<any>(null)\n  const [votingSession, setVotingSession] = useState<any>(null)\n  const [loading, setLoading] = useState(true)\n  const [generating, setGenerating] = useState(false)\n  const [error, setError] = useState(\"\")\n  const [timeRemaining, setTimeRemaining] = useState(\"\")\n  const router = useRouter()\n\n  useEffect(() => {\n    const checkAuthAndData = async () => {\n      try {\n        const mockUser = getMockUser()\n        if (!mockUser) {\n          router.push(\"/login\")\n          return\n        }\n\n        if (mockUser.hasVoted) {\n          router.push(\"/success\")\n          return\n        }\n\n        setUser(mockUser)\n\n        // Check for existing voting session\n        if (mockDatabase.votingSession) {\n          const now = new Date()\n          const expiresAt = new Date(mockDatabase.votingSession.expiresAt)\n\n          if (now < expiresAt && !mockDatabase.votingSession.isUsed) {\n            setVotingSession(mockDatabase.votingSession)\n            if (mockDatabase.votingSession.isValidated) {\n              router.push(\"/vote\")\n              return\n            }\n          } else {\n            // Clear expired session\n            mockDatabase.votingSession = null\n          }\n        }\n      } catch (err) {\n        setError(\"Terjadi kesalahan saat memuat data\")\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    checkAuthAndData()\n  }, [router])\n\n  // Update time remaining every second\n  useEffect(() => {\n    if (!votingSession) return\n\n    const updateTime = () => {\n      const now = new Date()\n      const expiresAt = new Date(votingSession.expiresAt)\n      const diff = expiresAt.getTime() - now.getTime()\n\n      if (diff <= 0) {\n        setTimeRemaining(\"Expired\")\n        // Clear expired session\n        mockDatabase.votingSession = null\n        setVotingSession(null)\n        return\n      }\n\n      const minutes = Math.floor(diff / (1000 * 60))\n      const seconds = Math.floor((diff % (1000 * 60)) / 1000)\n      setTimeRemaining(`${minutes}:${seconds.toString().padStart(2, \"0\")}`)\n    }\n\n    updateTime()\n    const interval = setInterval(updateTime, 1000)\n\n    return () => clearInterval(interval)\n  }, [votingSession])\n\n  // Check for validation status periodically\n  useEffect(() => {\n    if (!votingSession || votingSession.isValidated) return\n\n    const checkValidation = () => {\n      if (mockDatabase.votingSession?.isValidated) {\n        setVotingSession({ ...mockDatabase.votingSession })\n        router.push(\"/vote\")\n      }\n    }\n\n    const interval = setInterval(checkValidation, 2000)\n    return () => clearInterval(interval)\n  }, [votingSession, router])\n\n  const generateQRCode = async () => {\n    if (!user) return\n\n    setGenerating(true)\n    setError(\"\")\n\n    try {\n      // Simulate API delay\n      await new Promise((resolve) => setTimeout(resolve, 1000))\n\n      const session = mockDatabase.generateQRCode()\n      if (session) {\n        setVotingSession(session)\n      } else {\n        setError(\"Gagal membuat kode QR\")\n      }\n    } catch (err) {\n      setError(\"Terjadi kesalahan saat membuat kode QR\")\n    } finally {\n      setGenerating(false)\n    }\n  }\n\n  const refreshCode = async () => {\n    if (!votingSession) return\n\n    // Clear current session and generate new one\n    mockDatabase.votingSession = null\n    setVotingSession(null)\n    await generateQRCode()\n  }\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-background via-muted/30 to-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n          <p>Memuat data...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-muted/30 to-background p-4\">\n      <div className=\"container mx-auto max-w-2xl py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <div className=\"h-12 w-12 rounded-lg bg-primary flex items-center justify-center\">\n              <QrCode className=\"h-7 w-7 text-primary-foreground\" />\n            </div>\n            <div className=\"text-left\">\n              <h1 className=\"font-bold text-xl text-foreground\">ITERA Election</h1>\n              <p className=\"text-sm text-muted-foreground\">Generate Kode Voting</p>\n            </div>\n          </div>\n        </div>\n\n        {error && (\n          <Alert variant=\"destructive\" className=\"mb-6\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {/* User Info */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              Informasi Pemilih\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Nama</p>\n                <p className=\"font-semibold\">{user?.name}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Email</p>\n                <p className=\"font-semibold\">{user?.email}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Role</p>\n                <p className=\"font-semibold\">{user?.role}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Status</p>\n                <Badge variant=\"secondary\">Belum Voting</Badge>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* QR Code Section */}\n        {!votingSession ? (\n          <Card>\n            <CardHeader className=\"text-center\">\n              <CardTitle>Generate Kode Voting</CardTitle>\n              <CardDescription>\n                Klik tombol di bawah untuk membuat kode QR dan kode redeem yang akan digunakan untuk validasi voting\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"text-center\">\n              <Button onClick={generateQRCode} disabled={generating} size=\"lg\">\n                {generating ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                    Membuat Kode...\n                  </>\n                ) : (\n                  <>\n                    <QrCode className=\"mr-2 h-5 w-5\" />\n                    Generate Kode QR\n                  </>\n                )}\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-6\">\n            {/* QR Code Display */}\n            <Card>\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"flex items-center justify-center gap-2\">\n                  <QrCode className=\"h-5 w-5\" />\n                  Kode QR Voting\n                </CardTitle>\n                <CardDescription>Tunjukkan kode QR ini kepada panitia untuk validasi</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center space-y-4\">\n                  <QRCodeDisplay value={votingSession.qrCode} size={200} />\n\n                  <div className=\"flex items-center justify-center gap-2\">\n                    <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"text-sm text-muted-foreground\">Berlaku hingga: {timeRemaining}</span>\n                  </div>\n\n                  {votingSession.isValidated ? (\n                    <Alert>\n                      <CheckCircle className=\"h-4 w-4\" />\n                      <AlertDescription>\n                        Kode Anda sudah divalidasi! Anda akan diarahkan ke halaman voting.\n                      </AlertDescription>\n                    </Alert>\n                  ) : (\n                    <Button onClick={refreshCode} variant=\"outline\" size=\"sm\">\n                      <RefreshCw className=\"mr-2 h-4 w-4\" />\n                      Generate Ulang\n                    </Button>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Redeem Code */}\n            <Card>\n              <CardHeader className=\"text-center\">\n                <CardTitle>Kode Redeem</CardTitle>\n                <CardDescription>Alternatif jika QR code tidak dapat dipindai</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center\">\n                  <div className=\"inline-flex items-center justify-center p-4 bg-muted rounded-lg\">\n                    <span className=\"text-2xl font-mono font-bold tracking-wider\">{votingSession.redeemCode}</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    Berikan kode ini kepada panitia jika QR code tidak dapat dipindai\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Instructions */}\n            <Card className=\"bg-muted/50\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Langkah Selanjutnya</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3 text-sm\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"h-6 w-6 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-xs font-bold mt-0.5\">\n                      1\n                    </div>\n                    <p>Tunjukkan kode QR atau berikan kode redeem kepada panitia</p>\n                  </div>\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"h-6 w-6 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-xs font-bold mt-0.5\">\n                      2\n                    </div>\n                    <p>Tunggu panitia memvalidasi identitas dan kode Anda</p>\n                  </div>\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"h-6 w-6 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-xs font-bold mt-0.5\">\n                      3\n                    </div>\n                    <p>Setelah divalidasi, Anda akan diarahkan ke halaman voting</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Mock Validation Button for Testing */}\n            <Card className=\"bg-yellow-50 border-yellow-200\">\n              <CardHeader>\n                <CardTitle className=\"text-lg text-yellow-800\">Testing Mode</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-yellow-700 mb-4\">\n                  Untuk testing, klik tombol di bawah untuk mensimulasikan validasi oleh admin:\n                </p>\n                <Button\n                  onClick={() => {\n                    mockDatabase.validateQRCode(votingSession.redeemCode)\n                    setVotingSession({ ...mockDatabase.votingSession })\n                  }}\n                  variant=\"outline\"\n                  className=\"w-full\"\n                  disabled={votingSession.isValidated}\n                >\n                  {votingSession.isValidated ? \"Sudah Divalidasi\" : \"Simulasi Validasi Admin\"}\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n","size_bytes":12315},"app/login/page.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Vote, ArrowLeft, Loader2 } from \"@/lib/icons\"\nimport Link from \"next/link\"\nimport { useRouter } from \"next/navigation\"\n\n// Mock user data from seeder for testing\nconst MOCK_USERS = [\n  {\n    email: \"superadmin@itera.ac.id\",\n    password: \"superadmin123\",\n    role: \"SUPER_ADMIN\",\n    name: \"Super Administrator\",\n    hasVoted: false,\n  },\n  {\n    email: \"admin1@itera.ac.id\",\n    password: \"admin123\",\n    role: \"ADMIN\",\n    name: \"Admin Panitia 1\",\n    hasVoted: false,\n  },\n  {\n    email: \"admin2@itera.ac.id\",\n    password: \"admin123\",\n    role: \"ADMIN\",\n    name: \"Admin Panitia 2\",\n    hasVoted: false,\n  },\n  {\n    email: \"mahasiswa1@student.itera.ac.id\",\n    password: \"mahasiswa123\",\n    role: \"VOTER\",\n    name: \"Budi Santoso\",\n    hasVoted: false,\n  },\n  {\n    email: \"mahasiswa2@student.itera.ac.id\",\n    password: \"mahasiswa123\",\n    role: \"VOTER\",\n    name: \"Siti Nurhaliza\",\n    hasVoted: false,\n  },\n  {\n    email: \"mahasiswa3@student.itera.ac.id\",\n    password: \"mahasiswa123\",\n    role: \"VOTER\",\n    name: \"Andi Wijaya\",\n    hasVoted: false,\n  },\n  {\n    email: \"mahasiswa4@student.itera.ac.id\",\n    password: \"mahasiswa123\",\n    role: \"VOTER\",\n    name: \"Maya Sari\",\n    hasVoted: false,\n  },\n  {\n    email: \"mahasiswa5@student.itera.ac.id\",\n    password: \"mahasiswa123\",\n    role: \"VOTER\",\n    name: \"Reza Pratama\",\n    hasVoted: false,\n  },\n]\n\nexport default function LoginPage() {\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(\"\")\n  const router = useRouter()\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError(\"\")\n\n    try {\n      // Simulate API delay\n      await new Promise((resolve) => setTimeout(resolve, 1000))\n\n      // Find user in mock data\n      const user = MOCK_USERS.find((u) => u.email === email && u.password === password)\n\n      if (!user) {\n        setError(\"Email atau password salah\")\n        return\n      }\n\n      // Store user session in localStorage for mock auth\n      localStorage.setItem(\"mockUser\", JSON.stringify(user))\n\n      // Redirect based on role\n      switch (user.role) {\n        case \"SUPER_ADMIN\":\n          router.push(\"/super-admin\")\n          break\n        case \"ADMIN\":\n          router.push(\"/admin\")\n          break\n        default:\n          if (user.hasVoted) {\n            router.push(\"/success\")\n          } else {\n            router.push(\"/generate-code\")\n          }\n      }\n    } catch (err) {\n      setError(\"Terjadi kesalahan saat login\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-muted/30 to-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <Link href=\"/\" className=\"inline-flex items-center gap-2 text-muted-foreground hover:text-foreground mb-6\">\n            <ArrowLeft className=\"h-4 w-4\" />\n            Kembali ke Beranda\n          </Link>\n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <div className=\"h-12 w-12 rounded-lg bg-primary flex items-center justify-center\">\n              <Vote className=\"h-7 w-7 text-primary-foreground\" />\n            </div>\n            <div className=\"text-left\">\n              <h1 className=\"font-bold text-xl text-foreground\">ITERA Election</h1>\n              <p className=\"text-sm text-muted-foreground\">Pemilihan Presiden Mahasiswa</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Login Form */}\n        <Card>\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl\">Masuk ke Akun Anda</CardTitle>\n            <CardDescription>Gunakan email dan password mahasiswa ITERA untuk masuk</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              {error && (\n                <Alert variant=\"destructive\">\n                  <AlertDescription>{error}</AlertDescription>\n                </Alert>\n              )}\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email Mahasiswa</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"nama@student.itera.ac.id\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                  disabled={loading}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"Masukkan password Anda\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                  disabled={loading}\n                />\n              </div>\n\n              <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n                {loading ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Memproses...\n                  </>\n                ) : (\n                  <>\n                    Masuk\n                    <Vote className=\"ml-2 h-4 w-4\" />\n                  </>\n                )}\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-muted-foreground\">\n                Belum punya akun?{\" \"}\n                <Button variant=\"link\" className=\"p-0 h-auto font-normal\">\n                  Hubungi admin untuk registrasi\n                </Button>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Test Accounts Info */}\n        <Card className=\"mt-6 bg-muted/50\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <h3 className=\"font-semibold mb-2\">Akun Testing</h3>\n              <div className=\"text-sm space-y-2\">\n                <div className=\"p-2 bg-background rounded\">\n                  <p>\n                    <strong>Super Admin:</strong>\n                  </p>\n                  <p>Email: superadmin@itera.ac.id</p>\n                  <p>Password: superadmin123</p>\n                </div>\n                <div className=\"p-2 bg-background rounded\">\n                  <p>\n                    <strong>Admin:</strong>\n                  </p>\n                  <p>Email: admin1@itera.ac.id</p>\n                  <p>Password: admin123</p>\n                </div>\n                <div className=\"p-2 bg-background rounded\">\n                  <p>\n                    <strong>Mahasiswa:</strong>\n                  </p>\n                  <p>Email: mahasiswa1@student.itera.ac.id</p>\n                  <p>Password: mahasiswa123</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Info Card */}\n        <Card className=\"mt-6 bg-muted/50\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <h3 className=\"font-semibold mb-2\">Butuh Bantuan?</h3>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Jika Anda mengalami kesulitan saat login, silakan hubungi panitia pemilihan.\n              </p>\n              <div className=\"text-sm\">\n                <p>\n                  <strong>Email:</strong> pemilu@itera.ac.id\n                </p>\n                <p>\n                  <strong>WhatsApp:</strong> +62 812-3456-7890\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n","size_bytes":8261},"app/register/page.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Vote, User, Loader2, CheckCircle } from \"lucide-react\"\nimport { useRouter } from \"next/navigation\"\nimport { createClient } from \"@/lib/supabase/client\"\n\nconst PRODI_OPTIONS = [\n  \"Teknik Informatika\",\n  \"Teknik Sipil\",\n  \"Teknik Elektro\",\n  \"Teknik Kimia\",\n  \"Teknik Mesin\",\n  \"Teknik Industri\",\n  \"Teknik Geologi\",\n  \"Teknik Geofisika\",\n  \"Teknik Lingkungan\",\n  \"Arsitektur\",\n  \"Perencanaan Wilayah dan Kota\",\n  \"Teknik Biosistem\",\n  \"Sains Aktuaria\",\n  \"Matematika\",\n  \"Fisika\",\n  \"Kimia\",\n  \"Biologi\",\n  \"Farmasi\",\n]\n\nexport default function RegisterPage() {\n  const [formData, setFormData] = useState({\n    nim: \"\",\n    name: \"\",\n    prodi: \"\",\n    gender: \"\",\n    phone: \"\",\n  })\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(\"\")\n  const [userEmail, setUserEmail] = useState(\"\")\n  const router = useRouter()\n  const supabase = createClient()\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n      if (!user) {\n        router.push(\"/login\")\n        return\n      }\n      setUserEmail(user.email || \"\")\n\n      // Check if user already registered\n      const { data: userData } = await supabase.from(\"User\").select(\"*\").eq(\"email\", user.email).single()\n\n      if (userData) {\n        // User already registered, redirect based on status\n        if (userData.hasVoted) {\n          router.push(\"/success\")\n        } else {\n          router.push(\"/generate-code\")\n        }\n      }\n    }\n\n    checkAuth()\n  }, [router, supabase])\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData((prev) => ({\n      ...prev,\n      [field]: value,\n    }))\n  }\n\n  const validateNIM = (nim: string) => {\n    // Basic NIM validation for ITERA (usually 9 digits starting with specific patterns)\n    const nimPattern = /^[0-9]{9}$/\n    return nimPattern.test(nim)\n  }\n\n  const validatePhone = (phone: string) => {\n    // Indonesian phone number validation\n    const phonePattern = /^(\\+62|62|0)[0-9]{9,12}$/\n    return phonePattern.test(phone)\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError(\"\")\n\n    // Validation\n    if (!validateNIM(formData.nim)) {\n      setError(\"NIM harus berupa 9 digit angka\")\n      setLoading(false)\n      return\n    }\n\n    if (formData.phone && !validatePhone(formData.phone)) {\n      setError(\"Format nomor telepon tidak valid\")\n      setLoading(false)\n      return\n    }\n\n    try {\n      // Check if NIM already exists\n      const { data: existingUser } = await supabase.from(\"User\").select(\"nim\").eq(\"nim\", formData.nim).single()\n\n      if (existingUser) {\n        setError(\"NIM sudah terdaftar dalam sistem\")\n        setLoading(false)\n        return\n      }\n\n      // Insert new user\n      const { error: insertError } = await supabase.from(\"User\").insert({\n        email: userEmail,\n        nim: formData.nim,\n        name: formData.name,\n        prodi: formData.prodi,\n        gender: formData.gender,\n        phone: formData.phone || null,\n        role: \"VOTER\",\n      })\n\n      if (insertError) {\n        setError(\"Gagal menyimpan data: \" + insertError.message)\n        return\n      }\n\n      // Registration successful, redirect to generate code\n      router.push(\"/generate-code\")\n    } catch (err) {\n      setError(\"Terjadi kesalahan saat registrasi\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-muted/30 to-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-2xl\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <div className=\"h-12 w-12 rounded-lg bg-primary flex items-center justify-center\">\n              <Vote className=\"h-7 w-7 text-primary-foreground\" />\n            </div>\n            <div className=\"text-left\">\n              <h1 className=\"font-bold text-xl text-foreground\">ITERA Election</h1>\n              <p className=\"text-sm text-muted-foreground\">Registrasi Pemilih</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Registration Form */}\n        <Card>\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl flex items-center justify-center gap-2\">\n              <User className=\"h-6 w-6\" />\n              Lengkapi Data Diri\n            </CardTitle>\n            <CardDescription>\n              Silakan lengkapi data diri Anda untuk dapat berpartisipasi dalam pemilihan\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              {error && (\n                <Alert variant=\"destructive\">\n                  <AlertDescription>{error}</AlertDescription>\n                </Alert>\n              )}\n\n              {/* Email (Read-only) */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email Mahasiswa</Label>\n                <Input id=\"email\" type=\"email\" value={userEmail} disabled className=\"bg-muted\" />\n                <p className=\"text-xs text-muted-foreground\">Email ini sudah terverifikasi dari sistem login</p>\n              </div>\n\n              {/* NIM */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"nim\">NIM (Nomor Induk Mahasiswa) *</Label>\n                <Input\n                  id=\"nim\"\n                  type=\"text\"\n                  placeholder=\"Contoh: 121450001\"\n                  value={formData.nim}\n                  onChange={(e) => handleInputChange(\"nim\", e.target.value)}\n                  required\n                  disabled={loading}\n                  maxLength={9}\n                />\n                <p className=\"text-xs text-muted-foreground\">Masukkan 9 digit NIM Anda</p>\n              </div>\n\n              {/* Name */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Nama Lengkap *</Label>\n                <Input\n                  id=\"name\"\n                  type=\"text\"\n                  placeholder=\"Masukkan nama lengkap sesuai KTM\"\n                  value={formData.name}\n                  onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                  required\n                  disabled={loading}\n                />\n              </div>\n\n              {/* Program Studi */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"prodi\">Program Studi *</Label>\n                <Select\n                  value={formData.prodi}\n                  onValueChange={(value) => handleInputChange(\"prodi\", value)}\n                  disabled={loading}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Pilih program studi Anda\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {PRODI_OPTIONS.map((prodi) => (\n                      <SelectItem key={prodi} value={prodi}>\n                        {prodi}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Gender */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"gender\">Jenis Kelamin *</Label>\n                <Select\n                  value={formData.gender}\n                  onValueChange={(value) => handleInputChange(\"gender\", value)}\n                  disabled={loading}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Pilih jenis kelamin\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"L\">Laki-laki</SelectItem>\n                    <SelectItem value=\"P\">Perempuan</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Phone */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">Nomor Telepon</Label>\n                <Input\n                  id=\"phone\"\n                  type=\"tel\"\n                  placeholder=\"Contoh: 081234567890\"\n                  value={formData.phone}\n                  onChange={(e) => handleInputChange(\"phone\", e.target.value)}\n                  disabled={loading}\n                />\n                <p className=\"text-xs text-muted-foreground\">Opsional - untuk keperluan komunikasi jika diperlukan</p>\n              </div>\n\n              <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n                {loading ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Menyimpan Data...\n                  </>\n                ) : (\n                  <>\n                    <CheckCircle className=\"mr-2 h-4 w-4\" />\n                    Daftar Sebagai Pemilih\n                  </>\n                )}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        {/* Info Card */}\n        <Card className=\"mt-6 bg-muted/50\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <h3 className=\"font-semibold mb-2\">Informasi Penting</h3>\n              <div className=\"text-sm text-muted-foreground space-y-2\">\n                <p>• Pastikan data yang Anda masukkan sesuai dengan KTM</p>\n                <p>• NIM yang sudah terdaftar tidak dapat digunakan lagi</p>\n                <p>• Setelah registrasi, Anda akan mendapatkan kode QR untuk voting</p>\n                <p>• Hubungi panitia jika mengalami kesulitan: pemilu@itera.ac.id</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n","size_bytes":10303},"app/success/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { CheckCircle, Vote, User, Calendar, LogOut } from \"@/lib/icons\"\nimport { useRouter } from \"next/navigation\"\nimport { getMockUser, clearMockUser, mockDatabase } from \"@/lib/mock-auth\"\n\nexport default function SuccessPage() {\n  const [user, setUser] = useState<any>(null)\n  const [voteData, setVoteData] = useState<any>(null)\n  const [loading, setLoading] = useState(true)\n  const router = useRouter()\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const mockUser = getMockUser()\n        if (!mockUser) {\n          router.push(\"/login\")\n          return\n        }\n\n        if (!mockUser.hasVoted) {\n          router.push(\"/generate-code\")\n          return\n        }\n\n        setUser(mockUser)\n\n        // Get vote data from mock database\n        const userVote = mockDatabase.votes.find((vote) => vote.userId === mockUser.email)\n        if (userVote) {\n          const candidate = mockDatabase.candidates.find((c) => c.id === userVote.candidateId)\n          setVoteData({\n            ...userVote,\n            candidate,\n          })\n        }\n      } catch (err) {\n        console.error(\"Error loading data:\", err)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    loadData()\n  }, [router])\n\n  const handleLogout = async () => {\n    clearMockUser()\n    router.push(\"/\")\n  }\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-background via-muted/30 to-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"h-8 w-8 animate-spin mx-auto mb-4 border-2 border-primary border-t-transparent rounded-full\" />\n          <p>Memuat data...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-muted/30 to-background p-4\">\n      <div className=\"container mx-auto max-w-2xl py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <div className=\"h-12 w-12 rounded-lg bg-green-500 flex items-center justify-center\">\n              <CheckCircle className=\"h-7 w-7 text-white\" />\n            </div>\n            <div className=\"text-left\">\n              <h1 className=\"font-bold text-xl text-foreground\">ITERA Election</h1>\n              <p className=\"text-sm text-muted-foreground\">Vote Berhasil</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"space-y-6\">\n          {/* Success Message */}\n          <Card className=\"bg-green-50 border-green-200\">\n            <CardHeader className=\"text-center\">\n              <div className=\"mx-auto w-16 h-16 bg-green-500 rounded-full flex items-center justify-center mb-4\">\n                <CheckCircle className=\"h-8 w-8 text-white\" />\n              </div>\n              <CardTitle className=\"text-2xl text-green-800\">Vote Berhasil Disimpan!</CardTitle>\n              <CardDescription className=\"text-green-700\">\n                Terima kasih telah berpartisipasi dalam Pemilihan Presiden Mahasiswa ITERA 2024\n              </CardDescription>\n            </CardHeader>\n          </Card>\n\n          {/* Vote Summary */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Vote className=\"h-5 w-5\" />\n                Ringkasan Vote\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Pemilih</p>\n                    <p className=\"font-semibold\">{user?.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">{user?.email}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Waktu Vote</p>\n                    <p className=\"font-semibold\">\n                      {voteData?.createdAt\n                        ? new Date(voteData.createdAt).toLocaleString(\"id-ID\", {\n                            dateStyle: \"full\",\n                            timeStyle: \"short\",\n                          })\n                        : new Date().toLocaleString(\"id-ID\", {\n                            dateStyle: \"full\",\n                            timeStyle: \"short\",\n                          })}\n                    </p>\n                  </div>\n                </div>\n\n                {voteData?.candidate && (\n                  <div className=\"border-t pt-4\">\n                    <p className=\"text-sm text-muted-foreground mb-2\">Kandidat yang Dipilih</p>\n                    <div className=\"flex items-center gap-4 p-4 bg-muted/50 rounded-lg\">\n                      <div className=\"relative w-16 h-16\">\n                        <img\n                          src={voteData.candidate.photo || \"/placeholder.svg?height=64&width=64\"}\n                          alt={voteData.candidate.name}\n                          className=\"w-full h-full rounded-full object-cover\"\n                        />\n                      </div>\n                      <div>\n                        <h3 className=\"font-semibold text-lg\">{voteData.candidate.name}</h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {voteData.candidate.nim} • {voteData.candidate.prodi}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Status */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"h-5 w-5\" />\n                Status Pemilih\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-semibold\">Status Vote</p>\n                  <p className=\"text-sm text-muted-foreground\">Anda telah berhasil memberikan suara</p>\n                </div>\n                <Badge className=\"bg-green-100 text-green-800 hover:bg-green-100\">\n                  <CheckCircle className=\"mr-1 h-3 w-3\" />\n                  Sudah Vote\n                </Badge>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Voting Results Preview */}\n          <Card className=\"bg-blue-50 border-blue-200\">\n            <CardHeader>\n              <CardTitle className=\"text-blue-800\">Hasil Sementara (Testing)</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {mockDatabase.getResults().map((candidate, index) => (\n                  <div key={candidate.id} className=\"flex items-center justify-between p-3 bg-white rounded-lg\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center text-sm font-bold text-blue-800\">\n                        {index + 1}\n                      </div>\n                      <div>\n                        <p className=\"font-semibold text-sm\">{candidate.name}</p>\n                        <p className=\"text-xs text-muted-foreground\">{candidate.prodi}</p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-bold text-blue-800\">{candidate.voteCount}</p>\n                      <p className=\"text-xs text-muted-foreground\">suara</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Important Notes */}\n          <Card className=\"bg-yellow-50 border-yellow-200\">\n            <CardHeader>\n              <CardTitle className=\"text-yellow-800\">Informasi Penting</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 text-sm text-yellow-700\">\n                <p>• Vote Anda telah tersimpan dengan aman dalam sistem</p>\n                <p>• Identitas pemilih dijaga kerahasiaan sesuai prinsip pemilu</p>\n                <p>• Hasil pemilihan akan diumumkan setelah periode voting berakhir</p>\n                <p>• Terima kasih atas partisipasi Anda dalam demokrasi kampus</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Actions */}\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button variant=\"outline\" onClick={() => router.push(\"/\")} className=\"flex items-center gap-2\">\n              <Calendar className=\"h-4 w-4\" />\n              Kembali ke Beranda\n            </Button>\n            <Button onClick={handleLogout} variant=\"secondary\" className=\"flex items-center gap-2\">\n              <LogOut className=\"h-4 w-4\" />\n              Logout\n            </Button>\n          </div>\n\n          {/* Footer */}\n          <div className=\"text-center text-sm text-muted-foreground pt-8 border-t\">\n            <p>Pemilihan Presiden Mahasiswa ITERA 2024</p>\n            <p>Sistem Voting Digital - Institut Teknologi Sumatera</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":9602},"app/super-admin/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from \"recharts\"\nimport { Shield, Users, Vote, TrendingUp, Clock, AlertCircle, LogOut, RefreshCw, Download } from \"lucide-react\"\nimport { useRouter } from \"next/navigation\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport CandidateManagement from \"@/components/candidate-management\"\nimport UserManagement from \"@/components/user-management\"\nimport SystemSettings from \"@/components/system-settings\"\n\ninterface DashboardStats {\n  totalUsers: number\n  totalVotes: number\n  totalCandidates: number\n  pendingValidations: number\n  votingPercentage: number\n}\n\ninterface VoteStats {\n  candidateId: string\n  candidateName: string\n  voteCount: number\n  percentage: number\n}\n\nexport default function SuperAdminPage() {\n  const [admin, setAdmin] = useState<any>(null)\n  const [loading, setLoading] = useState(true)\n  const [stats, setStats] = useState<DashboardStats>({\n    totalUsers: 0,\n    totalVotes: 0,\n    totalCandidates: 0,\n    pendingValidations: 0,\n    votingPercentage: 0,\n  })\n  const [voteStats, setVoteStats] = useState<VoteStats[]>([])\n  const [error, setError] = useState(\"\")\n  const router = useRouter()\n  const supabase = createClient()\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const {\n          data: { user },\n        } = await supabase.auth.getUser()\n        if (!user) {\n          router.push(\"/login\")\n          return\n        }\n\n        const { data: adminData, error: adminError } = await supabase\n          .from(\"User\")\n          .select(\"*\")\n          .eq(\"email\", user.email)\n          .single()\n\n        if (adminError || !adminData || adminData.role !== \"SUPER_ADMIN\") {\n          router.push(\"/\")\n          return\n        }\n\n        setAdmin(adminData)\n        await loadDashboardData()\n      } catch (err) {\n        setError(\"Terjadi kesalahan saat memuat data\")\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    checkAuth()\n\n    // Set up real-time subscription for vote updates\n    const channel = supabase\n      .channel(\"super-admin-updates\")\n      .on(\n        \"postgres_changes\",\n        {\n          event: \"*\",\n          schema: \"public\",\n          table: \"Vote\",\n        },\n        () => {\n          loadDashboardData()\n        },\n      )\n      .on(\n        \"postgres_changes\",\n        {\n          event: \"*\",\n          schema: \"public\",\n          table: \"User\",\n        },\n        () => {\n          loadDashboardData()\n        },\n      )\n      .subscribe()\n\n    return () => {\n      supabase.removeChannel(channel)\n    }\n  }, [router, supabase])\n\n  const loadDashboardData = async () => {\n    try {\n      // Get total users (voters only)\n      const { count: totalUsers } = await supabase\n        .from(\"User\")\n        .select(\"*\", { count: \"exact\", head: true })\n        .eq(\"role\", \"VOTER\")\n\n      // Get total votes\n      const { count: totalVotes } = await supabase.from(\"Vote\").select(\"*\", { count: \"exact\", head: true })\n\n      // Get total active candidates\n      const { count: totalCandidates } = await supabase\n        .from(\"Candidate\")\n        .select(\"*\", { count: \"exact\", head: true })\n        .eq(\"isActive\", true)\n\n      // Get pending validations\n      const { count: pendingValidations } = await supabase\n        .from(\"VotingSession\")\n        .select(\"*\", { count: \"exact\", head: true })\n        .eq(\"isValidated\", false)\n        .eq(\"isUsed\", false)\n        .gte(\"expiresAt\", new Date().toISOString())\n\n      // Calculate voting percentage\n      const votingPercentage = totalUsers ? Math.round((totalVotes! / totalUsers) * 100) : 0\n\n      setStats({\n        totalUsers: totalUsers || 0,\n        totalVotes: totalVotes || 0,\n        totalCandidates: totalCandidates || 0,\n        pendingValidations: pendingValidations || 0,\n        votingPercentage,\n      })\n\n      // Get vote statistics by candidate\n      const { data: voteData } = await supabase.from(\"Vote\").select(`\n        candidateId,\n        candidate:Candidate(name)\n      `)\n\n      if (voteData) {\n        const voteCounts = voteData.reduce((acc: any, vote: any) => {\n          const candidateId = vote.candidateId\n          const candidateName = vote.candidate?.name || \"Unknown\"\n          acc[candidateId] = {\n            candidateId,\n            candidateName,\n            voteCount: (acc[candidateId]?.voteCount || 0) + 1,\n          }\n          return acc\n        }, {})\n\n        const voteStatsArray = Object.values(voteCounts).map((item: any) => ({\n          ...item,\n          percentage: totalVotes ? Math.round((item.voteCount / totalVotes) * 100) : 0,\n        }))\n\n        setVoteStats(voteStatsArray as VoteStats[])\n      }\n    } catch (err) {\n      console.error(\"Error loading dashboard data:\", err)\n    }\n  }\n\n  const handleLogout = async () => {\n    await supabase.auth.signOut()\n    router.push(\"/\")\n  }\n\n  const exportData = async (type: \"users\" | \"votes\" | \"all\") => {\n    try {\n      let data: any[] = []\n      let filename = \"\"\n\n      switch (type) {\n        case \"users\":\n          const { data: userData } = await supabase.from(\"User\").select(\"*\").eq(\"role\", \"VOTER\")\n          data = userData || []\n          filename = \"users_export.csv\"\n          break\n        case \"votes\":\n          const { data: voteData } = await supabase.from(\"Vote\").select(`\n            *,\n            user:User(name, nim, prodi),\n            candidate:Candidate(name, nim)\n          `)\n          data = voteData || []\n          filename = \"votes_export.csv\"\n          break\n        case \"all\":\n          // Export comprehensive data\n          const { data: allData } = await supabase.from(\"Vote\").select(`\n            createdAt,\n            user:User(name, nim, prodi, email),\n            candidate:Candidate(name, nim, prodi)\n          `)\n          data = allData || []\n          filename = \"election_results.csv\"\n          break\n      }\n\n      // Convert to CSV (simplified)\n      if (data.length > 0) {\n        const csv = convertToCSV(data)\n        downloadCSV(csv, filename)\n      }\n    } catch (err) {\n      setError(\"Gagal mengekspor data\")\n    }\n  }\n\n  const convertToCSV = (data: any[]) => {\n    if (data.length === 0) return \"\"\n\n    const headers = Object.keys(data[0])\n    const csvContent = [\n      headers.join(\",\"),\n      ...data.map((row) =>\n        headers\n          .map((header) => {\n            const value = row[header]\n            return typeof value === \"object\" ? JSON.stringify(value) : value\n          })\n          .join(\",\"),\n      ),\n    ].join(\"\\n\")\n\n    return csvContent\n  }\n\n  const downloadCSV = (csv: string, filename: string) => {\n    const blob = new Blob([csv], { type: \"text/csv\" })\n    const url = window.URL.createObjectURL(blob)\n    const a = document.createElement(\"a\")\n    a.href = url\n    a.download = filename\n    a.click()\n    window.URL.revokeObjectURL(url)\n  }\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-background via-muted/30 to-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"h-8 w-8 animate-spin mx-auto mb-4 border-2 border-primary border-t-transparent rounded-full\" />\n          <p>Memuat dashboard super admin...</p>\n        </div>\n      </div>\n    )\n  }\n\n  const COLORS = [\"#6366f1\", \"#4b5563\", \"#ea580c\", \"#0891b2\", \"#374151\"]\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-muted/30 to-background p-4\">\n      <div className=\"container mx-auto max-w-7xl py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"h-12 w-12 rounded-lg bg-primary flex items-center justify-center\">\n              <Shield className=\"h-7 w-7 text-primary-foreground\" />\n            </div>\n            <div>\n              <h1 className=\"font-bold text-xl text-foreground\">Super Admin Dashboard</h1>\n              <p className=\"text-sm text-muted-foreground\">Manajemen Sistem Pemilihan</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <Button variant=\"outline\" onClick={loadDashboardData}>\n              <RefreshCw className=\"mr-2 h-4 w-4\" />\n              Refresh\n            </Button>\n            <div className=\"text-right\">\n              <p className=\"font-semibold\">{admin?.name}</p>\n              <p className=\"text-sm text-muted-foreground\">{admin?.role}</p>\n            </div>\n            <Button variant=\"outline\" onClick={handleLogout}>\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              Logout\n            </Button>\n          </div>\n        </div>\n\n        {error && (\n          <Alert variant=\"destructive\" className=\"mb-6\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"candidates\">Kandidat</TabsTrigger>\n            <TabsTrigger value=\"users\">Users</TabsTrigger>\n            <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n            <TabsTrigger value=\"reports\">Reports</TabsTrigger>\n          </TabsList>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Pemilih</CardTitle>\n                  <Users className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{stats.totalUsers}</div>\n                  <p className=\"text-xs text-muted-foreground\">Mahasiswa terdaftar</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Votes</CardTitle>\n                  <Vote className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{stats.totalVotes}</div>\n                  <p className=\"text-xs text-muted-foreground\">Suara masuk</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Partisipasi</CardTitle>\n                  <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{stats.votingPercentage}%</div>\n                  <p className=\"text-xs text-muted-foreground\">Tingkat partisipasi</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n                  <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{stats.pendingValidations}</div>\n                  <p className=\"text-xs text-muted-foreground\">Menunggu validasi</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Charts */}\n            <div className=\"grid lg:grid-cols-2 gap-6\">\n              {/* Bar Chart */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Perolehan Suara per Kandidat</CardTitle>\n                  <CardDescription>Distribusi suara real-time</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <BarChart data={voteStats}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"candidateName\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Bar dataKey=\"voteCount\" fill=\"#6366f1\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n\n              {/* Pie Chart */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Persentase Suara</CardTitle>\n                  <CardDescription>Proporsi suara per kandidat</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <PieChart>\n                      <Pie\n                        data={voteStats}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        labelLine={false}\n                        label={({ candidateName, percentage }) => `${candidateName}: ${percentage}%`}\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"voteCount\"\n                      >\n                        {voteStats.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                    </PieChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent Activity */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Ringkasan Hasil</CardTitle>\n                <CardDescription>Perolehan suara terkini</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {voteStats.map((candidate, index) => (\n                    <div key={candidate.candidateId} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div\n                          className=\"w-4 h-4 rounded-full\"\n                          style={{ backgroundColor: COLORS[index % COLORS.length] }}\n                        />\n                        <span className=\"font-medium\">{candidate.candidateName}</span>\n                      </div>\n                      <div className=\"flex items-center gap-4\">\n                        <Badge variant=\"secondary\">{candidate.voteCount} suara</Badge>\n                        <Badge variant=\"outline\">{candidate.percentage}%</Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Candidates Tab */}\n          <TabsContent value=\"candidates\">\n            <CandidateManagement />\n          </TabsContent>\n\n          {/* Users Tab */}\n          <TabsContent value=\"users\">\n            <UserManagement />\n          </TabsContent>\n\n          {/* Settings Tab */}\n          <TabsContent value=\"settings\">\n            <SystemSettings />\n          </TabsContent>\n\n          {/* Reports Tab */}\n          <TabsContent value=\"reports\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Download className=\"h-5 w-5\" />\n                  Export Data\n                </CardTitle>\n                <CardDescription>Download data pemilihan dalam format CSV</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid md:grid-cols-3 gap-4\">\n                  <Button onClick={() => exportData(\"users\")} variant=\"outline\" className=\"w-full\">\n                    <Users className=\"mr-2 h-4 w-4\" />\n                    Export Data Pemilih\n                  </Button>\n                  <Button onClick={() => exportData(\"votes\")} variant=\"outline\" className=\"w-full\">\n                    <Vote className=\"mr-2 h-4 w-4\" />\n                    Export Data Voting\n                  </Button>\n                  <Button onClick={() => exportData(\"all\")} className=\"w-full\">\n                    <Download className=\"mr-2 h-4 w-4\" />\n                    Export Semua Data\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Statistics Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Statistik Lengkap</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <h4 className=\"font-semibold\">Statistik Pemilih</h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span>Total Mahasiswa Terdaftar:</span>\n                        <span className=\"font-medium\">{stats.totalUsers}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Sudah Memberikan Suara:</span>\n                        <span className=\"font-medium\">{stats.totalVotes}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Belum Memberikan Suara:</span>\n                        <span className=\"font-medium\">{stats.totalUsers - stats.totalVotes}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Tingkat Partisipasi:</span>\n                        <span className=\"font-medium\">{stats.votingPercentage}%</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <h4 className=\"font-semibold\">Statistik Kandidat</h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span>Total Kandidat Aktif:</span>\n                        <span className=\"font-medium\">{stats.totalCandidates}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Total Suara Masuk:</span>\n                        <span className=\"font-medium\">{stats.totalVotes}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Pending Validasi:</span>\n                        <span className=\"font-medium\">{stats.pendingValidations}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  )\n}\n","size_bytes":19666},"app/vote/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\"\nimport { Vote, User, CheckCircle, Loader2, AlertCircle, Eye } from \"@/lib/icons\"\nimport { useRouter } from \"next/navigation\"\nimport Image from \"next/image\"\nimport { getMockUser, mockDatabase } from \"@/lib/mock-auth\"\n\ninterface Candidate {\n  id: string\n  name: string\n  nim: string\n  prodi: string\n  visi: string\n  misi: string\n  photo?: string\n  isActive: boolean\n}\n\nexport default function VotePage() {\n  const [user, setUser] = useState<any>(null)\n  const [candidates, setCandidates] = useState<Candidate[]>([])\n  const [selectedCandidate, setSelectedCandidate] = useState<string>(\"\")\n  const [loading, setLoading] = useState(true)\n  const [voting, setVoting] = useState(false)\n  const [error, setError] = useState(\"\")\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false)\n  const [showDetailDialog, setShowDetailDialog] = useState(false)\n  const [detailCandidate, setDetailCandidate] = useState<Candidate | null>(null)\n  const router = useRouter()\n\n  useEffect(() => {\n    const checkAuthAndLoadData = async () => {\n      try {\n        const mockUser = getMockUser()\n        if (!mockUser) {\n          router.push(\"/login\")\n          return\n        }\n\n        if (mockUser.hasVoted) {\n          router.push(\"/success\")\n          return\n        }\n\n        // Check if user has validated voting session\n        if (\n          !mockDatabase.votingSession ||\n          !mockDatabase.votingSession.isValidated ||\n          mockDatabase.votingSession.isUsed\n        ) {\n          router.push(\"/generate-code\")\n          return\n        }\n\n        setUser(mockUser)\n\n        // Load candidates from mock database\n        setCandidates(mockDatabase.candidates.filter((c) => c.isActive))\n      } catch (err) {\n        setError(\"Terjadi kesalahan saat memuat data\")\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    checkAuthAndLoadData()\n  }, [router])\n\n  const handleVoteSubmit = async () => {\n    if (!selectedCandidate || !user) return\n\n    setVoting(true)\n    setError(\"\")\n\n    try {\n      // Simulate API delay\n      await new Promise((resolve) => setTimeout(resolve, 1500))\n\n      // Submit vote using mock database\n      const success = mockDatabase.submitVote(selectedCandidate)\n\n      if (!success) {\n        setError(\"Gagal menyimpan vote\")\n        setVoting(false)\n        return\n      }\n\n      // Success - redirect to success page\n      router.push(\"/success\")\n    } catch (err) {\n      setError(\"Terjadi kesalahan saat menyimpan vote\")\n      setVoting(false)\n    }\n  }\n\n  const handleCandidateSelect = (candidateId: string) => {\n    setSelectedCandidate(candidateId)\n  }\n\n  const handleShowDetail = (candidate: Candidate) => {\n    setDetailCandidate(candidate)\n    setShowDetailDialog(true)\n  }\n\n  const handleConfirmVote = () => {\n    if (!selectedCandidate) return\n    setShowConfirmDialog(true)\n  }\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-background via-muted/30 to-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n          <p>Memuat data kandidat...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-muted/30 to-background p-4\">\n      <div className=\"container mx-auto max-w-4xl py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <div className=\"h-12 w-12 rounded-lg bg-primary flex items-center justify-center\">\n              <Vote className=\"h-7 w-7 text-primary-foreground\" />\n            </div>\n            <div className=\"text-left\">\n              <h1 className=\"font-bold text-xl text-foreground\">ITERA Election</h1>\n              <p className=\"text-sm text-muted-foreground\">Pilih Kandidat</p>\n            </div>\n          </div>\n        </div>\n\n        {error && (\n          <Alert variant=\"destructive\" className=\"mb-6\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {/* Voter Info */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              Informasi Pemilih\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Nama</p>\n                <p className=\"font-semibold\">{user?.name}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Email</p>\n                <p className=\"font-semibold\">{user?.email}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Role</p>\n                <p className=\"font-semibold\">{user?.role}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Instructions */}\n        <Alert className=\"mb-8\">\n          <CheckCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            <strong>Petunjuk Voting:</strong> Pilih salah satu kandidat di bawah ini dengan mengklik kartu kandidat.\n            Setelah memilih, klik tombol \"Vote\" untuk mengonfirmasi pilihan Anda. Pilihan tidak dapat diubah setelah\n            dikonfirmasi.\n          </AlertDescription>\n        </Alert>\n\n        {/* Candidates Grid */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n          {candidates.map((candidate) => (\n            <Card\n              key={candidate.id}\n              className={`cursor-pointer transition-all duration-200 hover:shadow-lg ${\n                selectedCandidate === candidate.id ? \"ring-2 ring-primary bg-primary/5\" : \"hover:shadow-md\"\n              }`}\n              onClick={() => handleCandidateSelect(candidate.id)}\n            >\n              <CardHeader className=\"text-center\">\n                <div className=\"relative w-32 h-32 mx-auto mb-4\">\n                  <Image\n                    src={candidate.photo || \"/placeholder.svg?height=128&width=128\"}\n                    alt={candidate.name}\n                    fill\n                    className=\"rounded-full object-cover\"\n                  />\n                  {selectedCandidate === candidate.id && (\n                    <div className=\"absolute -top-2 -right-2\">\n                      <div className=\"h-8 w-8 bg-primary rounded-full flex items-center justify-center\">\n                        <CheckCircle className=\"h-5 w-5 text-primary-foreground\" />\n                      </div>\n                    </div>\n                  )}\n                </div>\n                <CardTitle className=\"text-lg\">{candidate.name}</CardTitle>\n                <CardDescription>\n                  <div className=\"space-y-1\">\n                    <p>NIM: {candidate.nim}</p>\n                    <p>{candidate.prodi}</p>\n                  </div>\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div>\n                    <p className=\"text-sm font-semibold text-muted-foreground mb-1\">Visi:</p>\n                    <p className=\"text-sm line-clamp-3\">{candidate.visi}</p>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"w-full bg-transparent\"\n                    onClick={(e) => {\n                      e.stopPropagation()\n                      handleShowDetail(candidate)\n                    }}\n                  >\n                    <Eye className=\"mr-2 h-4 w-4\" />\n                    Lihat Detail\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Vote Button */}\n        <div className=\"text-center\">\n          <Button size=\"lg\" onClick={handleConfirmVote} disabled={!selectedCandidate || voting} className=\"min-w-48\">\n            {voting ? (\n              <>\n                <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                Menyimpan Vote...\n              </>\n            ) : (\n              <>\n                <Vote className=\"mr-2 h-5 w-5\" />\n                Vote Sekarang\n              </>\n            )}\n          </Button>\n          {selectedCandidate && (\n            <p className=\"text-sm text-muted-foreground mt-2\">\n              Anda akan memilih: <strong>{candidates.find((c) => c.id === selectedCandidate)?.name}</strong>\n            </p>\n          )}\n        </div>\n\n        {/* Confirmation Dialog */}\n        <Dialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Konfirmasi Pilihan</DialogTitle>\n              <DialogDescription>\n                Apakah Anda yakin ingin memilih kandidat berikut? Pilihan tidak dapat diubah setelah dikonfirmasi.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"py-4\">\n              {selectedCandidate && (\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"relative w-16 h-16\">\n                        <Image\n                          src={\n                            candidates.find((c) => c.id === selectedCandidate)?.photo ||\n                            \"/placeholder.svg?height=64&width=64\" ||\n                            \"/placeholder.svg\" ||\n                            \"/placeholder.svg\"\n                          }\n                          alt={candidates.find((c) => c.id === selectedCandidate)?.name || \"\"}\n                          fill\n                          className=\"rounded-full object-cover\"\n                        />\n                      </div>\n                      <div>\n                        <h3 className=\"font-semibold text-lg\">\n                          {candidates.find((c) => c.id === selectedCandidate)?.name}\n                        </h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {candidates.find((c) => c.id === selectedCandidate)?.nim} •{\" \"}\n                          {candidates.find((c) => c.id === selectedCandidate)?.prodi}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setShowConfirmDialog(false)}>\n                Batal\n              </Button>\n              <Button onClick={handleVoteSubmit} disabled={voting}>\n                {voting ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Menyimpan...\n                  </>\n                ) : (\n                  \"Ya, Vote Sekarang\"\n                )}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n\n        {/* Detail Dialog */}\n        <Dialog open={showDetailDialog} onOpenChange={setShowDetailDialog}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Detail Kandidat</DialogTitle>\n            </DialogHeader>\n            {detailCandidate && (\n              <div className=\"space-y-6\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"relative w-24 h-24\">\n                    <Image\n                      src={detailCandidate.photo || \"/placeholder.svg?height=96&width=96\"}\n                      alt={detailCandidate.name}\n                      fill\n                      className=\"rounded-full object-cover\"\n                    />\n                  </div>\n                  <div>\n                    <h3 className=\"text-2xl font-bold\">{detailCandidate.name}</h3>\n                    <p className=\"text-muted-foreground\">\n                      NIM: {detailCandidate.nim} • {detailCandidate.prodi}\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-semibold text-lg mb-2\">Visi</h4>\n                    <p className=\"text-sm leading-relaxed\">{detailCandidate.visi}</p>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold text-lg mb-2\">Misi</h4>\n                    <p className=\"text-sm leading-relaxed whitespace-pre-line\">{detailCandidate.misi}</p>\n                  </div>\n                </div>\n              </div>\n            )}\n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setShowDetailDialog(false)}>\n                Tutup\n              </Button>\n              {detailCandidate && (\n                <Button\n                  onClick={() => {\n                    handleCandidateSelect(detailCandidate.id)\n                    setShowDetailDialog(false)\n                  }}\n                >\n                  Pilih Kandidat Ini\n                </Button>\n              )}\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  )\n}\n","size_bytes":13833},"app/waiting/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Clock, CheckCircle, Loader2, RefreshCw } from \"lucide-react\"\nimport { useRouter } from \"next/navigation\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { Button } from \"@/components/ui/button\"\n\nexport default function WaitingPage() {\n  const [user, setUser] = useState<any>(null)\n  const [votingSession, setVotingSession] = useState<any>(null)\n  const [loading, setLoading] = useState(true)\n  const [timeRemaining, setTimeRemaining] = useState(\"\")\n  const router = useRouter()\n  const supabase = createClient()\n\n  useEffect(() => {\n    const checkAuthAndData = async () => {\n      try {\n        const {\n          data: { user: authUser },\n        } = await supabase.auth.getUser()\n        if (!authUser) {\n          router.push(\"/login\")\n          return\n        }\n\n        const { data: userData } = await supabase.from(\"User\").select(\"*\").eq(\"email\", authUser.email).single()\n\n        if (!userData) {\n          router.push(\"/register\")\n          return\n        }\n\n        if (userData.hasVoted) {\n          router.push(\"/success\")\n          return\n        }\n\n        setUser(userData)\n\n        // Get current voting session\n        const { data: sessionData } = await supabase\n          .from(\"VotingSession\")\n          .select(\"*\")\n          .eq(\"userId\", userData.id)\n          .eq(\"isUsed\", false)\n          .order(\"createdAt\", { ascending: false })\n          .limit(1)\n          .single()\n\n        if (!sessionData) {\n          router.push(\"/generate-code\")\n          return\n        }\n\n        if (sessionData.isValidated) {\n          router.push(\"/vote\")\n          return\n        }\n\n        setVotingSession(sessionData)\n      } catch (err) {\n        console.error(\"Error loading data:\", err)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    checkAuthAndData()\n\n    // Set up real-time subscription\n    const channel = supabase\n      .channel(\"waiting-validation\")\n      .on(\n        \"postgres_changes\",\n        {\n          event: \"UPDATE\",\n          schema: \"public\",\n          table: \"VotingSession\",\n        },\n        (payload) => {\n          if (payload.new.userId === user?.id && payload.new.isValidated) {\n            router.push(\"/vote\")\n          }\n        },\n      )\n      .subscribe()\n\n    return () => {\n      supabase.removeChannel(channel)\n    }\n  }, [router, supabase, user?.id])\n\n  useEffect(() => {\n    if (!votingSession) return\n\n    const updateTimer = () => {\n      const now = new Date()\n      const expiresAt = new Date(votingSession.expiresAt)\n      const diff = expiresAt.getTime() - now.getTime()\n\n      if (diff <= 0) {\n        setTimeRemaining(\"Expired\")\n        return\n      }\n\n      const minutes = Math.floor(diff / (1000 * 60))\n      const seconds = Math.floor((diff % (1000 * 60)) / 1000)\n      setTimeRemaining(`${minutes}:${seconds.toString().padStart(2, \"0\")}`)\n    }\n\n    updateTimer()\n    const interval = setInterval(updateTimer, 1000)\n\n    return () => clearInterval(interval)\n  }, [votingSession])\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-background via-muted/30 to-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n          <p>Memuat data...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-muted/30 to-background p-4\">\n      <div className=\"container mx-auto max-w-2xl py-8\">\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <div className=\"h-12 w-12 rounded-lg bg-primary flex items-center justify-center\">\n              <Clock className=\"h-7 w-7 text-primary-foreground\" />\n            </div>\n            <div className=\"text-left\">\n              <h1 className=\"font-bold text-xl text-foreground\">ITERA Election</h1>\n              <p className=\"text-sm text-muted-foreground\">Menunggu Validasi</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"space-y-6\">\n          {/* Status Card */}\n          <Card>\n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"flex items-center justify-center gap-2\">\n                <Clock className=\"h-5 w-5 text-orange-500\" />\n                Menunggu Validasi Panitia\n              </CardTitle>\n              <CardDescription>Kode Anda sedang menunggu untuk divalidasi oleh panitia</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center space-y-4\">\n                <div className=\"flex items-center justify-center\">\n                  <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm text-muted-foreground\">Status Kode</p>\n                  <Badge variant=\"secondary\" className=\"text-orange-600 bg-orange-50\">\n                    Menunggu Validasi\n                  </Badge>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm text-muted-foreground\">Waktu Tersisa</p>\n                  <div className=\"text-2xl font-mono font-bold\">{timeRemaining}</div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm text-muted-foreground\">Kode Redeem</p>\n                  <div className=\"inline-flex items-center justify-center p-2 bg-muted rounded\">\n                    <span className=\"text-lg font-mono font-bold\">{votingSession?.redeemCode}</span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Instructions */}\n          <Card className=\"bg-muted/50\">\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Apa yang harus dilakukan?</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <Alert>\n                  <CheckCircle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    Kode QR atau redeem code Anda sudah diterima oleh sistem. Silakan tunggu panitia untuk memvalidasi\n                    identitas Anda.\n                  </AlertDescription>\n                </Alert>\n\n                <div className=\"space-y-3 text-sm\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"h-6 w-6 rounded-full bg-green-500 text-white flex items-center justify-center text-xs font-bold mt-0.5\">\n                      ✓\n                    </div>\n                    <p>Kode berhasil dibuat dan siap untuk validasi</p>\n                  </div>\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"h-6 w-6 rounded-full bg-orange-500 text-white flex items-center justify-center text-xs font-bold mt-0.5\">\n                      ⏳\n                    </div>\n                    <p>Menunggu panitia memvalidasi identitas Anda</p>\n                  </div>\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"h-6 w-6 rounded-full bg-gray-300 text-gray-600 flex items-center justify-center text-xs font-bold mt-0.5\">\n                      3\n                    </div>\n                    <p>Setelah divalidasi, Anda akan otomatis diarahkan ke halaman voting</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Help Card */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Butuh Bantuan?</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 text-sm\">\n                <p>Jika Anda menunggu terlalu lama atau mengalami masalah:</p>\n                <ul className=\"list-disc list-inside space-y-1 text-muted-foreground\">\n                  <li>Pastikan Anda berada di lokasi yang telah ditentukan</li>\n                  <li>Tunjukkan kode redeem kepada panitia jika QR code bermasalah</li>\n                  <li>Hubungi panitia jika kode sudah expired</li>\n                </ul>\n                <div className=\"pt-2 border-t\">\n                  <p>\n                    <strong>Kontak Panitia:</strong>\n                  </p>\n                  <p>Email: pemilu@itera.ac.id</p>\n                  <p>WhatsApp: +62 812-3456-7890</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Back to Generate Code */}\n          <div className=\"text-center\">\n            <Button variant=\"outline\" onClick={() => router.push(\"/generate-code\")}>\n              <RefreshCw className=\"mr-2 h-4 w-4\" />\n              Kembali ke Generate Code\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":9166},"components/ui/accordion.tsx":{"content":"\"use client\"\n\nimport type * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDownIcon } from \"@/lib/icons\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Accordion({ ...props }: React.ComponentProps<typeof AccordionPrimitive.Root>) {\n  return <AccordionPrimitive.Root data-slot=\"accordion\" {...props} />\n}\n\nfunction AccordionItem({ className, ...props }: React.ComponentProps<typeof AccordionPrimitive.Item>) {\n  return (\n    <AccordionPrimitive.Item\n      data-slot=\"accordion-item\"\n      className={cn(\"border-b last:border-b-0\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AccordionTrigger({ className, children, ...props }: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        data-slot=\"accordion-trigger\"\n        className={cn(\n          \"focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180\",\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <ChevronDownIcon className=\"text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200\" />\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  )\n}\n\nfunction AccordionContent({ className, children, ...props }: React.ComponentProps<typeof AccordionPrimitive.Content>) {\n  return (\n    <AccordionPrimitive.Content\n      data-slot=\"accordion-content\"\n      className=\"data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm\"\n      {...props}\n    >\n      <div className={cn(\"pt-0 pb-4\", className)}>{children}</div>\n    </AccordionPrimitive.Content>\n  )\n}\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":2040},"components/ui/alert-dialog.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog'\n\nimport { cn } from '@/lib/utils'\nimport { buttonVariants } from '@/components/ui/button'\n\nfunction AlertDialog({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {\n  return <AlertDialogPrimitive.Root data-slot=\"alert-dialog\" {...props} />\n}\n\nfunction AlertDialogTrigger({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {\n  return (\n    <AlertDialogPrimitive.Trigger data-slot=\"alert-dialog-trigger\" {...props} />\n  )\n}\n\nfunction AlertDialogPortal({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {\n  return (\n    <AlertDialogPrimitive.Portal data-slot=\"alert-dialog-portal\" {...props} />\n  )\n}\n\nfunction AlertDialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {\n  return (\n    <AlertDialogPrimitive.Overlay\n      data-slot=\"alert-dialog-overlay\"\n      className={cn(\n        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {\n  return (\n    <AlertDialogPortal>\n      <AlertDialogOverlay />\n      <AlertDialogPrimitive.Content\n        data-slot=\"alert-dialog-content\"\n        className={cn(\n          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg',\n          className,\n        )}\n        {...props}\n      />\n    </AlertDialogPortal>\n  )\n}\n\nfunction AlertDialogHeader({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"alert-dialog-header\"\n      className={cn('flex flex-col gap-2 text-center sm:text-left', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogFooter({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"alert-dialog-footer\"\n      className={cn(\n        'flex flex-col-reverse gap-2 sm:flex-row sm:justify-end',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {\n  return (\n    <AlertDialogPrimitive.Title\n      data-slot=\"alert-dialog-title\"\n      className={cn('text-lg font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {\n  return (\n    <AlertDialogPrimitive.Description\n      data-slot=\"alert-dialog-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogAction({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {\n  return (\n    <AlertDialogPrimitive.Action\n      className={cn(buttonVariants(), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogCancel({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {\n  return (\n    <AlertDialogPrimitive.Cancel\n      className={cn(buttonVariants({ variant: 'outline' }), className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":3867},"components/ui/alert.tsx":{"content":"import type * as React from \"react\"\nimport { cva, type VariantProps } from \"@/lib/cva\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-card text-card-foreground\",\n        destructive:\n          \"text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nfunction Alert({ className, variant, ...props }: React.ComponentProps<\"div\"> & VariantProps<typeof alertVariants>) {\n  return <div data-slot=\"alert\" role=\"alert\" className={cn(alertVariants({ variant }), className)} {...props} />\n}\n\nfunction AlertTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-title\"\n      className={cn(\"col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-description\"\n      className={cn(\n        \"text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1534},"components/ui/aspect-ratio.tsx":{"content":"'use client'\n\nimport * as AspectRatioPrimitive from '@radix-ui/react-aspect-ratio'\n\nfunction AspectRatio({\n  ...props\n}: React.ComponentProps<typeof AspectRatioPrimitive.Root>) {\n  return <AspectRatioPrimitive.Root data-slot=\"aspect-ratio\" {...props} />\n}\n\nexport { AspectRatio }\n","size_bytes":280},"components/ui/avatar.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as AvatarPrimitive from '@radix-ui/react-avatar'\n\nimport { cn } from '@/lib/utils'\n\nfunction Avatar({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn(\n        'relative flex size-8 shrink-0 overflow-hidden rounded-full',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <AvatarPrimitive.Image\n      data-slot=\"avatar-image\"\n      className={cn('aspect-square size-full', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarFallback({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        'bg-muted flex size-full items-center justify-center rounded-full',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1099},"components/ui/badge.tsx":{"content":"import type * as React from \"react\"\nimport { cva, type VariantProps } from \"@/lib/cva\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default: \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive: \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return <div className={cn(badgeVariants({ variant }), className)} {...props} />\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1073},"components/ui/breadcrumb.tsx":{"content":"import type * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"@/lib/icons\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Breadcrumb({ ...props }: React.ComponentProps<\"nav\">) {\n  return <nav aria-label=\"breadcrumb\" data-slot=\"breadcrumb\" {...props} />\n}\n\nfunction BreadcrumbList({ className, ...props }: React.ComponentProps<\"ol\">) {\n  return (\n    <ol\n      data-slot=\"breadcrumb-list\"\n      className={cn(\n        \"text-muted-foreground flex flex-wrap items-center gap-1.5 text-sm break-words sm:gap-2.5\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return <li data-slot=\"breadcrumb-item\" className={cn(\"inline-flex items-center gap-1.5\", className)} {...props} />\n}\n\nfunction BreadcrumbLink({\n  asChild,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp data-slot=\"breadcrumb-link\" className={cn(\"hover:text-foreground transition-colors\", className)} {...props} />\n  )\n}\n\nfunction BreadcrumbPage({ className, ...props }: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"breadcrumb-page\"\n      role=\"link\"\n      aria-disabled=\"true\"\n      aria-current=\"page\"\n      className={cn(\"text-foreground font-normal\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbSeparator({ children, className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"breadcrumb-separator\"\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn(\"[&>svg]:size-3.5\", className)}\n      {...props}\n    >\n      {children ?? <ChevronRight />}\n    </li>\n  )\n}\n\nfunction BreadcrumbEllipsis({ className, ...props }: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"breadcrumb-ellipsis\"\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn(\"flex size-9 items-center justify-center\", className)}\n      {...props}\n    >\n      <MoreHorizontal className=\"size-4\" />\n      <span className=\"sr-only\">More</span>\n    </span>\n  )\n}\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2298},"components/ui/button.tsx":{"content":"import type * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"@/lib/cva\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 dark:bg-destructive/60\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary: \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return <Comp data-slot=\"button\" className={cn(buttonVariants({ variant, size, className }))} {...props} />\n}\n\nexport { Button, buttonVariants }\n","size_bytes":2043},"components/ui/calendar.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport {\n  ChevronDownIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n} from 'lucide-react'\nimport { DayButton, DayPicker, getDefaultClassNames } from 'react-day-picker'\n\nimport { cn } from '@/lib/utils'\nimport { Button, buttonVariants } from '@/components/ui/button'\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  captionLayout = 'label',\n  buttonVariant = 'ghost',\n  formatters,\n  components,\n  ...props\n}: React.ComponentProps<typeof DayPicker> & {\n  buttonVariant?: React.ComponentProps<typeof Button>['variant']\n}) {\n  const defaultClassNames = getDefaultClassNames()\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\n        'bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent',\n        String.raw`rtl:**:[.rdp-button\\_next>svg]:rotate-180`,\n        String.raw`rtl:**:[.rdp-button\\_previous>svg]:rotate-180`,\n        className,\n      )}\n      captionLayout={captionLayout}\n      formatters={{\n        formatMonthDropdown: (date) =>\n          date.toLocaleString('default', { month: 'short' }),\n        ...formatters,\n      }}\n      classNames={{\n        root: cn('w-fit', defaultClassNames.root),\n        months: cn(\n          'flex gap-4 flex-col md:flex-row relative',\n          defaultClassNames.months,\n        ),\n        month: cn('flex flex-col w-full gap-4', defaultClassNames.month),\n        nav: cn(\n          'flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between',\n          defaultClassNames.nav,\n        ),\n        button_previous: cn(\n          buttonVariants({ variant: buttonVariant }),\n          'size-(--cell-size) aria-disabled:opacity-50 p-0 select-none',\n          defaultClassNames.button_previous,\n        ),\n        button_next: cn(\n          buttonVariants({ variant: buttonVariant }),\n          'size-(--cell-size) aria-disabled:opacity-50 p-0 select-none',\n          defaultClassNames.button_next,\n        ),\n        month_caption: cn(\n          'flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)',\n          defaultClassNames.month_caption,\n        ),\n        dropdowns: cn(\n          'w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5',\n          defaultClassNames.dropdowns,\n        ),\n        dropdown_root: cn(\n          'relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md',\n          defaultClassNames.dropdown_root,\n        ),\n        dropdown: cn(\n          'absolute bg-popover inset-0 opacity-0',\n          defaultClassNames.dropdown,\n        ),\n        caption_label: cn(\n          'select-none font-medium',\n          captionLayout === 'label'\n            ? 'text-sm'\n            : 'rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5',\n          defaultClassNames.caption_label,\n        ),\n        table: 'w-full border-collapse',\n        weekdays: cn('flex', defaultClassNames.weekdays),\n        weekday: cn(\n          'text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none',\n          defaultClassNames.weekday,\n        ),\n        week: cn('flex w-full mt-2', defaultClassNames.week),\n        week_number_header: cn(\n          'select-none w-(--cell-size)',\n          defaultClassNames.week_number_header,\n        ),\n        week_number: cn(\n          'text-[0.8rem] select-none text-muted-foreground',\n          defaultClassNames.week_number,\n        ),\n        day: cn(\n          'relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none',\n          defaultClassNames.day,\n        ),\n        range_start: cn(\n          'rounded-l-md bg-accent',\n          defaultClassNames.range_start,\n        ),\n        range_middle: cn('rounded-none', defaultClassNames.range_middle),\n        range_end: cn('rounded-r-md bg-accent', defaultClassNames.range_end),\n        today: cn(\n          'bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none',\n          defaultClassNames.today,\n        ),\n        outside: cn(\n          'text-muted-foreground aria-selected:text-muted-foreground',\n          defaultClassNames.outside,\n        ),\n        disabled: cn(\n          'text-muted-foreground opacity-50',\n          defaultClassNames.disabled,\n        ),\n        hidden: cn('invisible', defaultClassNames.hidden),\n        ...classNames,\n      }}\n      components={{\n        Root: ({ className, rootRef, ...props }) => {\n          return (\n            <div\n              data-slot=\"calendar\"\n              ref={rootRef}\n              className={cn(className)}\n              {...props}\n            />\n          )\n        },\n        Chevron: ({ className, orientation, ...props }) => {\n          if (orientation === 'left') {\n            return (\n              <ChevronLeftIcon className={cn('size-4', className)} {...props} />\n            )\n          }\n\n          if (orientation === 'right') {\n            return (\n              <ChevronRightIcon\n                className={cn('size-4', className)}\n                {...props}\n              />\n            )\n          }\n\n          return (\n            <ChevronDownIcon className={cn('size-4', className)} {...props} />\n          )\n        },\n        DayButton: CalendarDayButton,\n        WeekNumber: ({ children, ...props }) => {\n          return (\n            <td {...props}>\n              <div className=\"flex size-(--cell-size) items-center justify-center text-center\">\n                {children}\n              </div>\n            </td>\n          )\n        },\n        ...components,\n      }}\n      {...props}\n    />\n  )\n}\n\nfunction CalendarDayButton({\n  className,\n  day,\n  modifiers,\n  ...props\n}: React.ComponentProps<typeof DayButton>) {\n  const defaultClassNames = getDefaultClassNames()\n\n  const ref = React.useRef<HTMLButtonElement>(null)\n  React.useEffect(() => {\n    if (modifiers.focused) ref.current?.focus()\n  }, [modifiers.focused])\n\n  return (\n    <Button\n      ref={ref}\n      variant=\"ghost\"\n      size=\"icon\"\n      data-day={day.date.toLocaleDateString()}\n      data-selected-single={\n        modifiers.selected &&\n        !modifiers.range_start &&\n        !modifiers.range_end &&\n        !modifiers.range_middle\n      }\n      data-range-start={modifiers.range_start}\n      data-range-end={modifiers.range_end}\n      data-range-middle={modifiers.range_middle}\n      className={cn(\n        'data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70',\n        defaultClassNames.day,\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Calendar, CalendarDayButton }\n","size_bytes":7679},"components/ui/card.tsx":{"content":"import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Card({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        'bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        '@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn('leading-none font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        'col-start-2 row-span-2 row-start-1 self-start justify-self-end',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn('px-6', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn('flex items-center px-6 [.border-t]:pt-6', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1992},"components/ui/carousel.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from 'embla-carousel-react'\nimport { ArrowLeft, ArrowRight } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: 'horizontal' | 'vertical'\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error('useCarousel must be used within a <Carousel />')\n  }\n\n  return context\n}\n\nfunction Carousel({\n  orientation = 'horizontal',\n  opts,\n  setApi,\n  plugins,\n  className,\n  children,\n  ...props\n}: React.ComponentProps<'div'> & CarouselProps) {\n  const [carouselRef, api] = useEmblaCarousel(\n    {\n      ...opts,\n      axis: orientation === 'horizontal' ? 'x' : 'y',\n    },\n    plugins,\n  )\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n  const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n  const onSelect = React.useCallback((api: CarouselApi) => {\n    if (!api) return\n    setCanScrollPrev(api.canScrollPrev())\n    setCanScrollNext(api.canScrollNext())\n  }, [])\n\n  const scrollPrev = React.useCallback(() => {\n    api?.scrollPrev()\n  }, [api])\n\n  const scrollNext = React.useCallback(() => {\n    api?.scrollNext()\n  }, [api])\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === 'ArrowLeft') {\n        event.preventDefault()\n        scrollPrev()\n      } else if (event.key === 'ArrowRight') {\n        event.preventDefault()\n        scrollNext()\n      }\n    },\n    [scrollPrev, scrollNext],\n  )\n\n  React.useEffect(() => {\n    if (!api || !setApi) return\n    setApi(api)\n  }, [api, setApi])\n\n  React.useEffect(() => {\n    if (!api) return\n    onSelect(api)\n    api.on('reInit', onSelect)\n    api.on('select', onSelect)\n\n    return () => {\n      api?.off('select', onSelect)\n    }\n  }, [api, onSelect])\n\n  return (\n    <CarouselContext.Provider\n      value={{\n        carouselRef,\n        api: api,\n        opts,\n        orientation:\n          orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\n        scrollPrev,\n        scrollNext,\n        canScrollPrev,\n        canScrollNext,\n      }}\n    >\n      <div\n        onKeyDownCapture={handleKeyDown}\n        className={cn('relative', className)}\n        role=\"region\"\n        aria-roledescription=\"carousel\"\n        data-slot=\"carousel\"\n        {...props}\n      >\n        {children}\n      </div>\n    </CarouselContext.Provider>\n  )\n}\n\nfunction CarouselContent({ className, ...props }: React.ComponentProps<'div'>) {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div\n      ref={carouselRef}\n      className=\"overflow-hidden\"\n      data-slot=\"carousel-content\"\n    >\n      <div\n        className={cn(\n          'flex',\n          orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',\n          className,\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction CarouselItem({ className, ...props }: React.ComponentProps<'div'>) {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      data-slot=\"carousel-item\"\n      className={cn(\n        'min-w-0 shrink-0 grow-0 basis-full',\n        orientation === 'horizontal' ? 'pl-4' : 'pt-4',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CarouselPrevious({\n  className,\n  variant = 'outline',\n  size = 'icon',\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      data-slot=\"carousel-previous\"\n      variant={variant}\n      size={size}\n      className={cn(\n        'absolute size-8 rounded-full',\n        orientation === 'horizontal'\n          ? 'top-1/2 -left-12 -translate-y-1/2'\n          : '-top-12 left-1/2 -translate-x-1/2 rotate-90',\n        className,\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n}\n\nfunction CarouselNext({\n  className,\n  variant = 'outline',\n  size = 'icon',\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      data-slot=\"carousel-next\"\n      variant={variant}\n      size={size}\n      className={cn(\n        'absolute size-8 rounded-full',\n        orientation === 'horizontal'\n          ? 'top-1/2 -right-12 -translate-y-1/2'\n          : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',\n        className,\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n}\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":5562},"components/ui/chart.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as RechartsPrimitive from 'recharts'\n\nimport { cn } from '@/lib/utils'\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: '', dark: '.dark' } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error('useChart must be used within a <ChartContainer />')\n  }\n\n  return context\n}\n\nfunction ChartContainer({\n  id,\n  className,\n  children,\n  config,\n  ...props\n}: React.ComponentProps<'div'> & {\n  config: ChartConfig\n  children: React.ComponentProps<\n    typeof RechartsPrimitive.ResponsiveContainer\n  >['children']\n}) {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-slot=\"chart\"\n        data-chart={chartId}\n        className={cn(\n          \"[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden\",\n          className,\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n}\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color,\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join('\\n')}\n}\n`,\n          )\n          .join('\\n'),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nfunction ChartTooltipContent({\n  active,\n  payload,\n  className,\n  indicator = 'dot',\n  hideLabel = false,\n  hideIndicator = false,\n  label,\n  labelFormatter,\n  labelClassName,\n  formatter,\n  color,\n  nameKey,\n  labelKey,\n}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n  React.ComponentProps<'div'> & {\n    hideLabel?: boolean\n    hideIndicator?: boolean\n    indicator?: 'line' | 'dot' | 'dashed'\n    nameKey?: string\n    labelKey?: string\n  }) {\n  const { config } = useChart()\n\n  const tooltipLabel = React.useMemo(() => {\n    if (hideLabel || !payload?.length) {\n      return null\n    }\n\n    const [item] = payload\n    const key = `${labelKey || item?.dataKey || item?.name || 'value'}`\n    const itemConfig = getPayloadConfigFromPayload(config, item, key)\n    const value =\n      !labelKey && typeof label === 'string'\n        ? config[label as keyof typeof config]?.label || label\n        : itemConfig?.label\n\n    if (labelFormatter) {\n      return (\n        <div className={cn('font-medium', labelClassName)}>\n          {labelFormatter(value, payload)}\n        </div>\n      )\n    }\n\n    if (!value) {\n      return null\n    }\n\n    return <div className={cn('font-medium', labelClassName)}>{value}</div>\n  }, [\n    label,\n    labelFormatter,\n    payload,\n    hideLabel,\n    labelClassName,\n    config,\n    labelKey,\n  ])\n\n  if (!active || !payload?.length) {\n    return null\n  }\n\n  const nestLabel = payload.length === 1 && indicator !== 'dot'\n\n  return (\n    <div\n      className={cn(\n        'border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl',\n        className,\n      )}\n    >\n      {!nestLabel ? tooltipLabel : null}\n      <div className=\"grid gap-1.5\">\n        {payload.map((item, index) => {\n          const key = `${nameKey || item.name || item.dataKey || 'value'}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n          const indicatorColor = color || item.payload.fill || item.color\n\n          return (\n            <div\n              key={item.dataKey}\n              className={cn(\n                '[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5',\n                indicator === 'dot' && 'items-center',\n              )}\n            >\n              {formatter && item?.value !== undefined && item.name ? (\n                formatter(item.value, item.name, item, index, item.payload)\n              ) : (\n                <>\n                  {itemConfig?.icon ? (\n                    <itemConfig.icon />\n                  ) : (\n                    !hideIndicator && (\n                      <div\n                        className={cn(\n                          'shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)',\n                          {\n                            'h-2.5 w-2.5': indicator === 'dot',\n                            'w-1': indicator === 'line',\n                            'w-0 border-[1.5px] border-dashed bg-transparent':\n                              indicator === 'dashed',\n                            'my-0.5': nestLabel && indicator === 'dashed',\n                          },\n                        )}\n                        style={\n                          {\n                            '--color-bg': indicatorColor,\n                            '--color-border': indicatorColor,\n                          } as React.CSSProperties\n                        }\n                      />\n                    )\n                  )}\n                  <div\n                    className={cn(\n                      'flex flex-1 justify-between leading-none',\n                      nestLabel ? 'items-end' : 'items-center',\n                    )}\n                  >\n                    <div className=\"grid gap-1.5\">\n                      {nestLabel ? tooltipLabel : null}\n                      <span className=\"text-muted-foreground\">\n                        {itemConfig?.label || item.name}\n                      </span>\n                    </div>\n                    {item.value && (\n                      <span className=\"text-foreground font-mono font-medium tabular-nums\">\n                        {item.value.toLocaleString()}\n                      </span>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nfunction ChartLegendContent({\n  className,\n  hideIcon = false,\n  payload,\n  verticalAlign = 'bottom',\n  nameKey,\n}: React.ComponentProps<'div'> &\n  Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {\n    hideIcon?: boolean\n    nameKey?: string\n  }) {\n  const { config } = useChart()\n\n  if (!payload?.length) {\n    return null\n  }\n\n  return (\n    <div\n      className={cn(\n        'flex items-center justify-center gap-4',\n        verticalAlign === 'top' ? 'pb-3' : 'pt-3',\n        className,\n      )}\n    >\n      {payload.map((item) => {\n        const key = `${nameKey || item.dataKey || 'value'}`\n        const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n        return (\n          <div\n            key={item.value}\n            className={\n              '[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3'\n            }\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: item.color,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string,\n) {\n  if (typeof payload !== 'object' || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    'payload' in payload &&\n    typeof payload.payload === 'object' &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === 'string'\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":9786},"components/ui/checkbox.tsx":{"content":"\"use client\"\n\nimport type * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { CheckIcon } from \"@/lib/icons\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Checkbox({ className, ...props }: React.ComponentProps<typeof CheckboxPrimitive.Root>) {\n  return (\n    <CheckboxPrimitive.Root\n      data-slot=\"checkbox\"\n      className={cn(\n        \"peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    >\n      <CheckboxPrimitive.Indicator\n        data-slot=\"checkbox-indicator\"\n        className=\"flex items-center justify-center text-current transition-none\"\n      >\n        <CheckIcon className=\"size-3.5\" />\n      </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n  )\n}\n\nexport { Checkbox }\n","size_bytes":1227},"components/ui/collapsible.tsx":{"content":"'use client'\n\nimport * as CollapsiblePrimitive from '@radix-ui/react-collapsible'\n\nfunction Collapsible({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {\n  return <CollapsiblePrimitive.Root data-slot=\"collapsible\" {...props} />\n}\n\nfunction CollapsibleTrigger({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleTrigger\n      data-slot=\"collapsible-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction CollapsibleContent({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleContent\n      data-slot=\"collapsible-content\"\n      {...props}\n    />\n  )\n}\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":800},"components/ui/command.tsx":{"content":"\"use client\"\n\nimport type * as React from \"react\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { SearchIcon } from \"@/lib/icons\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\"\n\nfunction Command({ className, ...props }: React.ComponentProps<typeof CommandPrimitive>) {\n  return (\n    <CommandPrimitive\n      data-slot=\"command\"\n      className={cn(\n        \"bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandDialog({\n  title = \"Command Palette\",\n  description = \"Search for a command to run...\",\n  children,\n  className,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof Dialog> & {\n  title?: string\n  description?: string\n  className?: string\n  showCloseButton?: boolean\n}) {\n  return (\n    <Dialog {...props}>\n      <DialogHeader className=\"sr-only\">\n        <DialogTitle>{title}</DialogTitle>\n        <DialogDescription>{description}</DialogDescription>\n      </DialogHeader>\n      <DialogContent className={cn(\"overflow-hidden p-0\", className)} showCloseButton={showCloseButton}>\n        <Command className=\"[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nfunction CommandInput({ className, ...props }: React.ComponentProps<typeof CommandPrimitive.Input>) {\n  return (\n    <div data-slot=\"command-input-wrapper\" className=\"flex h-9 items-center gap-2 border-b px-3\">\n      <SearchIcon className=\"size-4 shrink-0 opacity-50\" />\n      <CommandPrimitive.Input\n        data-slot=\"command-input\"\n        className={cn(\n          \"placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50\",\n          className,\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction CommandList({ className, ...props }: React.ComponentProps<typeof CommandPrimitive.List>) {\n  return (\n    <CommandPrimitive.List\n      data-slot=\"command-list\"\n      className={cn(\"max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CommandEmpty({ ...props }: React.ComponentProps<typeof CommandPrimitive.Empty>) {\n  return <CommandPrimitive.Empty data-slot=\"command-empty\" className=\"py-6 text-center text-sm\" {...props} />\n}\n\nfunction CommandGroup({ className, ...props }: React.ComponentProps<typeof CommandPrimitive.Group>) {\n  return (\n    <CommandPrimitive.Group\n      data-slot=\"command-group\"\n      className={cn(\n        \"text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandSeparator({ className, ...props }: React.ComponentProps<typeof CommandPrimitive.Separator>) {\n  return (\n    <CommandPrimitive.Separator\n      data-slot=\"command-separator\"\n      className={cn(\"bg-border -mx-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CommandItem({ className, ...props }: React.ComponentProps<typeof CommandPrimitive.Item>) {\n  return (\n    <CommandPrimitive.Item\n      data-slot=\"command-item\"\n      className={cn(\n        \"data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandShortcut({ className, ...props }: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"command-shortcut\"\n      className={cn(\"text-muted-foreground ml-auto text-xs tracking-widest\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4665},"components/ui/context-menu.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ContextMenuPrimitive from '@radix-ui/react-context-menu'\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction ContextMenu({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Root>) {\n  return <ContextMenuPrimitive.Root data-slot=\"context-menu\" {...props} />\n}\n\nfunction ContextMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Trigger>) {\n  return (\n    <ContextMenuPrimitive.Trigger data-slot=\"context-menu-trigger\" {...props} />\n  )\n}\n\nfunction ContextMenuGroup({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Group>) {\n  return (\n    <ContextMenuPrimitive.Group data-slot=\"context-menu-group\" {...props} />\n  )\n}\n\nfunction ContextMenuPortal({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Portal>) {\n  return (\n    <ContextMenuPrimitive.Portal data-slot=\"context-menu-portal\" {...props} />\n  )\n}\n\nfunction ContextMenuSub({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Sub>) {\n  return <ContextMenuPrimitive.Sub data-slot=\"context-menu-sub\" {...props} />\n}\n\nfunction ContextMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.RadioGroup>) {\n  return (\n    <ContextMenuPrimitive.RadioGroup\n      data-slot=\"context-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <ContextMenuPrimitive.SubTrigger\n      data-slot=\"context-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto\" />\n    </ContextMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction ContextMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.SubContent>) {\n  return (\n    <ContextMenuPrimitive.SubContent\n      data-slot=\"context-menu-sub-content\"\n      className={cn(\n        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Content>) {\n  return (\n    <ContextMenuPrimitive.Portal>\n      <ContextMenuPrimitive.Content\n        data-slot=\"context-menu-content\"\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-context-menu-content-available-height) min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',\n          className,\n        )}\n        {...props}\n      />\n    </ContextMenuPrimitive.Portal>\n  )\n}\n\nfunction ContextMenuItem({\n  className,\n  inset,\n  variant = 'default',\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: 'default' | 'destructive'\n}) {\n  return (\n    <ContextMenuPrimitive.Item\n      data-slot=\"context-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.CheckboxItem>) {\n  return (\n    <ContextMenuPrimitive.CheckboxItem\n      data-slot=\"context-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <ContextMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </ContextMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </ContextMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction ContextMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.RadioItem>) {\n  return (\n    <ContextMenuPrimitive.RadioItem\n      data-slot=\"context-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <ContextMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </ContextMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </ContextMenuPrimitive.RadioItem>\n  )\n}\n\nfunction ContextMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <ContextMenuPrimitive.Label\n      data-slot=\"context-menu-label\"\n      data-inset={inset}\n      className={cn(\n        'text-foreground px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Separator>) {\n  return (\n    <ContextMenuPrimitive.Separator\n      data-slot=\"context-menu-separator\"\n      className={cn('bg-border -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"context-menu-shortcut\"\n      className={cn(\n        'text-muted-foreground ml-auto text-xs tracking-widest',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":8230},"components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"@/lib/icons\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className,\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"flex flex-col space-y-1.5 text-center sm:text-left\", className)} {...props} />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)} {...props} />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3754},"components/ui/drawer.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport { Drawer as DrawerPrimitive } from 'vaul'\n\nimport { cn } from '@/lib/utils'\n\nfunction Drawer({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) {\n  return <DrawerPrimitive.Root data-slot=\"drawer\" {...props} />\n}\n\nfunction DrawerTrigger({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {\n  return <DrawerPrimitive.Trigger data-slot=\"drawer-trigger\" {...props} />\n}\n\nfunction DrawerPortal({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {\n  return <DrawerPrimitive.Portal data-slot=\"drawer-portal\" {...props} />\n}\n\nfunction DrawerClose({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Close>) {\n  return <DrawerPrimitive.Close data-slot=\"drawer-close\" {...props} />\n}\n\nfunction DrawerOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {\n  return (\n    <DrawerPrimitive.Overlay\n      data-slot=\"drawer-overlay\"\n      className={cn(\n        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Content>) {\n  return (\n    <DrawerPortal data-slot=\"drawer-portal\">\n      <DrawerOverlay />\n      <DrawerPrimitive.Content\n        data-slot=\"drawer-content\"\n        className={cn(\n          'group/drawer-content bg-background fixed z-50 flex h-auto flex-col',\n          'data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 data-[vaul-drawer-direction=top]:mb-24 data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg data-[vaul-drawer-direction=top]:border-b',\n          'data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 data-[vaul-drawer-direction=bottom]:mt-24 data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg data-[vaul-drawer-direction=bottom]:border-t',\n          'data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:border-l data-[vaul-drawer-direction=right]:sm:max-w-sm',\n          'data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:border-r data-[vaul-drawer-direction=left]:sm:max-w-sm',\n          className,\n        )}\n        {...props}\n      >\n        <div className=\"bg-muted mx-auto mt-4 hidden h-2 w-[100px] shrink-0 rounded-full group-data-[vaul-drawer-direction=bottom]/drawer-content:block\" />\n        {children}\n      </DrawerPrimitive.Content>\n    </DrawerPortal>\n  )\n}\n\nfunction DrawerHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"drawer-header\"\n      className={cn(\n        'flex flex-col gap-0.5 p-4 group-data-[vaul-drawer-direction=bottom]/drawer-content:text-center group-data-[vaul-drawer-direction=top]/drawer-content:text-center md:gap-1.5 md:text-left',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"drawer-footer\"\n      className={cn('mt-auto flex flex-col gap-2 p-4', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Title>) {\n  return (\n    <DrawerPrimitive.Title\n      data-slot=\"drawer-title\"\n      className={cn('text-foreground font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Description>) {\n  return (\n    <DrawerPrimitive.Description\n      data-slot=\"drawer-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":4258},"components/ui/dropdown-menu.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',\n          className,\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = 'default',\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: 'default' | 'destructive'\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn('bg-border -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        'text-muted-foreground ml-auto text-xs tracking-widest',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n}\n","size_bytes":8292},"components/ui/form.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as LabelPrimitive from '@radix-ui/react-label'\nimport { Slot } from '@radix-ui/react-slot'\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  useFormState,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from 'react-hook-form'\n\nimport { cn } from '@/lib/utils'\nimport { Label } from '@/components/ui/label'\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue,\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState } = useFormContext()\n  const formState = useFormState({ name: fieldContext.name })\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error('useFormField should be used within <FormField>')\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue,\n)\n\nfunction FormItem({ className, ...props }: React.ComponentProps<'div'>) {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div\n        data-slot=\"form-item\"\n        className={cn('grid gap-2', className)}\n        {...props}\n      />\n    </FormItemContext.Provider>\n  )\n}\n\nfunction FormLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      data-slot=\"form-label\"\n      data-error={!!error}\n      className={cn('data-[error=true]:text-destructive', className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n}\n\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      data-slot=\"form-control\"\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n}\n\nfunction FormDescription({ className, ...props }: React.ComponentProps<'p'>) {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<'p'>) {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? '') : props.children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      data-slot=\"form-message\"\n      id={formMessageId}\n      className={cn('text-destructive text-sm', className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n}\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":3761},"components/ui/hover-card.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as HoverCardPrimitive from '@radix-ui/react-hover-card'\n\nimport { cn } from '@/lib/utils'\n\nfunction HoverCard({\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Root>) {\n  return <HoverCardPrimitive.Root data-slot=\"hover-card\" {...props} />\n}\n\nfunction HoverCardTrigger({\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Trigger>) {\n  return (\n    <HoverCardPrimitive.Trigger data-slot=\"hover-card-trigger\" {...props} />\n  )\n}\n\nfunction HoverCardContent({\n  className,\n  align = 'center',\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Content>) {\n  return (\n    <HoverCardPrimitive.Portal data-slot=\"hover-card-portal\">\n      <HoverCardPrimitive.Content\n        data-slot=\"hover-card-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-64 origin-(--radix-hover-card-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden',\n          className,\n        )}\n        {...props}\n      />\n    </HoverCardPrimitive.Portal>\n  )\n}\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1533},"components/ui/input-otp.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { MinusIcon } from \"@/lib/icons\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction InputOTP({\n  className,\n  containerClassName,\n  ...props\n}: React.ComponentProps<typeof OTPInput> & {\n  containerClassName?: string\n}) {\n  return (\n    <OTPInput\n      data-slot=\"input-otp\"\n      containerClassName={cn(\"flex items-center gap-2 has-disabled:opacity-50\", containerClassName)}\n      className={cn(\"disabled:cursor-not-allowed\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction InputOTPGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return <div data-slot=\"input-otp-group\" className={cn(\"flex items-center\", className)} {...props} />\n}\n\nfunction InputOTPSlot({\n  index,\n  className,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  index: number\n}) {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext?.slots[index] ?? {}\n\n  return (\n    <div\n      data-slot=\"input-otp-slot\"\n      data-active={isActive}\n      className={cn(\n        \"data-[active=true]:border-ring data-[active=true]:ring-ring/50 data-[active=true]:aria-invalid:ring-destructive/20 dark:data-[active=true]:aria-invalid:ring-destructive/40 aria-invalid:border-destructive data-[active=true]:aria-invalid:border-destructive dark:bg-input/30 border-input relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-xs transition-all outline-none first:rounded-l-md first:border-l last:rounded-r-md data-[active=true]:z-10 data-[active=true]:ring-[3px]\",\n        className,\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"animate-caret-blink bg-foreground h-4 w-px duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n}\n\nfunction InputOTPSeparator({ ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div data-slot=\"input-otp-separator\" role=\"separator\" {...props}>\n      <MinusIcon />\n    </div>\n  )\n}\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2198},"components/ui/input.tsx":{"content":"import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Input({ className, type, ...props }: React.ComponentProps<'input'>) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        'file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n        'focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',\n        'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n","size_bytes":968},"components/ui/label.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as LabelPrimitive from '@radix-ui/react-label'\n\nimport { cn } from '@/lib/utils'\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        'flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n","size_bytes":612},"components/ui/menubar.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as MenubarPrimitive from '@radix-ui/react-menubar'\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Menubar({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Root>) {\n  return (\n    <MenubarPrimitive.Root\n      data-slot=\"menubar\"\n      className={cn(\n        'bg-background flex h-9 items-center gap-1 rounded-md border p-1 shadow-xs',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu data-slot=\"menubar-menu\" {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group data-slot=\"menubar-group\" {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal data-slot=\"menubar-portal\" {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return (\n    <MenubarPrimitive.RadioGroup data-slot=\"menubar-radio-group\" {...props} />\n  )\n}\n\nfunction MenubarTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Trigger>) {\n  return (\n    <MenubarPrimitive.Trigger\n      data-slot=\"menubar-trigger\"\n      className={cn(\n        'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex items-center rounded-sm px-2 py-1 text-sm font-medium outline-hidden select-none',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarContent({\n  className,\n  align = 'start',\n  alignOffset = -4,\n  sideOffset = 8,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Content>) {\n  return (\n    <MenubarPortal>\n      <MenubarPrimitive.Content\n        data-slot=\"menubar-content\"\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[12rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-md',\n          className,\n        )}\n        {...props}\n      />\n    </MenubarPortal>\n  )\n}\n\nfunction MenubarItem({\n  className,\n  inset,\n  variant = 'default',\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Item> & {\n  inset?: boolean\n  variant?: 'default' | 'destructive'\n}) {\n  return (\n    <MenubarPrimitive.Item\n      data-slot=\"menubar-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.CheckboxItem>) {\n  return (\n    <MenubarPrimitive.CheckboxItem\n      data-slot=\"menubar-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <MenubarPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </MenubarPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </MenubarPrimitive.CheckboxItem>\n  )\n}\n\nfunction MenubarRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioItem>) {\n  return (\n    <MenubarPrimitive.RadioItem\n      data-slot=\"menubar-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <MenubarPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </MenubarPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </MenubarPrimitive.RadioItem>\n  )\n}\n\nfunction MenubarLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <MenubarPrimitive.Label\n      data-slot=\"menubar-label\"\n      data-inset={inset}\n      className={cn(\n        'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Separator>) {\n  return (\n    <MenubarPrimitive.Separator\n      data-slot=\"menubar-separator\"\n      className={cn('bg-border -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarShortcut({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"menubar-shortcut\"\n      className={cn(\n        'text-muted-foreground ml-auto text-xs tracking-widest',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nfunction MenubarSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <MenubarPrimitive.SubTrigger\n      data-slot=\"menubar-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-none select-none data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto h-4 w-4\" />\n    </MenubarPrimitive.SubTrigger>\n  )\n}\n\nfunction MenubarSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.SubContent>) {\n  return (\n    <MenubarPrimitive.SubContent\n      data-slot=\"menubar-sub-content\"\n      className={cn(\n        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Menubar,\n  MenubarPortal,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarGroup,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarItem,\n  MenubarShortcut,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarSub,\n  MenubarSubTrigger,\n  MenubarSubContent,\n}\n","size_bytes":8404},"components/ui/navigation-menu.tsx":{"content":"import type * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"@/lib/cva\"\nimport { ChevronDownIcon } from \"@/lib/icons\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction NavigationMenu({\n  className,\n  children,\n  viewport = true,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Root> & {\n  viewport?: boolean\n}) {\n  return (\n    <NavigationMenuPrimitive.Root\n      data-slot=\"navigation-menu\"\n      data-viewport={viewport}\n      className={cn(\"group/navigation-menu relative flex max-w-max flex-1 items-center justify-center\", className)}\n      {...props}\n    >\n      {children}\n      {viewport && <NavigationMenuViewport />}\n    </NavigationMenuPrimitive.Root>\n  )\n}\n\nfunction NavigationMenuList({ className, ...props }: React.ComponentProps<typeof NavigationMenuPrimitive.List>) {\n  return (\n    <NavigationMenuPrimitive.List\n      data-slot=\"navigation-menu-list\"\n      className={cn(\"group flex flex-1 list-none items-center justify-center gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuItem({ className, ...props }: React.ComponentProps<typeof NavigationMenuPrimitive.Item>) {\n  return (\n    <NavigationMenuPrimitive.Item data-slot=\"navigation-menu-item\" className={cn(\"relative\", className)} {...props} />\n  )\n}\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=open]:hover:bg-accent data-[state=open]:text-accent-foreground data-[state=open]:focus:bg-accent data-[state=open]:bg-accent/50 focus-visible:ring-ring/50 outline-none transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1\",\n)\n\nfunction NavigationMenuTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Trigger>) {\n  return (\n    <NavigationMenuPrimitive.Trigger\n      data-slot=\"navigation-menu-trigger\"\n      className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n      {...props}\n    >\n      {children}{\" \"}\n      <ChevronDownIcon\n        className=\"relative top-[1px] ml-1 size-3 transition duration-300 group-data-[state=open]:rotate-180\"\n        aria-hidden=\"true\"\n      />\n    </NavigationMenuPrimitive.Trigger>\n  )\n}\n\nfunction NavigationMenuContent({ className, ...props }: React.ComponentProps<typeof NavigationMenuPrimitive.Content>) {\n  return (\n    <NavigationMenuPrimitive.Content\n      data-slot=\"navigation-menu-content\"\n      className={cn(\n        \"data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 top-0 left-0 w-full p-2 pr-2.5 md:absolute md:w-auto\",\n        \"group-data-[viewport=false]/navigation-menu:bg-popover group-data-[viewport=false]/navigation-menu:text-popover-foreground group-data-[viewport=false]/navigation-menu:data-[state=open]:animate-in group-data-[viewport=false]/navigation-menu:data-[state=closed]:animate-out group-data-[viewport=false]/navigation-menu:data-[state=closed]:zoom-out-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:zoom-in-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:fade-in-0 group-data-[viewport=false]/navigation-menu:data-[state=closed]:fade-out-0 group-data-[viewport=false]/navigation-menu:top-full group-data-[viewport=false]/navigation-menu:mt-1.5 group-data-[viewport=false]/navigation-menu:overflow-hidden group-data-[viewport=false]/navigation-menu:rounded-md group-data-[viewport=false]/navigation-menu:border group-data-[viewport=false]/navigation-menu:shadow group-data-[viewport=false]/navigation-menu:duration-200 **:data-[slot=navigation-menu-link]:focus:ring-0 **:data-[slot=navigation-menu-link]:focus:outline-none\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuViewport({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Viewport>) {\n  return (\n    <div className={\"absolute top-full left-0 isolate z-50 flex justify-center\"}>\n      <NavigationMenuPrimitive.Viewport\n        data-slot=\"navigation-menu-viewport\"\n        className={cn(\n          \"origin-top-center bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border shadow md:w-[var(--radix-navigation-menu-viewport-width)]\",\n          className,\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction NavigationMenuLink({ className, ...props }: React.ComponentProps<typeof NavigationMenuPrimitive.Link>) {\n  return (\n    <NavigationMenuPrimitive.Link\n      data-slot=\"navigation-menu-link\"\n      className={cn(\n        \"data-[active=true]:focus:bg-accent data-[active=true]:hover:bg-accent data-[active=true]:bg-accent/50 data-[active=true]:text-accent-foreground hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus-visible:ring-ring/50 [&_svg:not([class*='text-'])]:text-muted-foreground flex flex-col gap-1 rounded-sm p-2 text-sm transition-all outline-none focus-visible:ring-[3px] focus-visible:outline-1 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuIndicator({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Indicator>) {\n  return (\n    <NavigationMenuPrimitive.Indicator\n      data-slot=\"navigation-menu-indicator\"\n      className={cn(\n        \"data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden\",\n        className,\n      )}\n      {...props}\n    >\n      <div className=\"bg-border relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm shadow-md\" />\n    </NavigationMenuPrimitive.Indicator>\n  )\n}\n\nexport {\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n  navigationMenuTriggerStyle,\n}\n","size_bytes":6541},"components/ui/pagination.tsx":{"content":"import * as React from 'react'\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  MoreHorizontalIcon,\n} from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\nimport { Button, buttonVariants } from '@/components/ui/button'\n\nfunction Pagination({ className, ...props }: React.ComponentProps<'nav'>) {\n  return (\n    <nav\n      role=\"navigation\"\n      aria-label=\"pagination\"\n      data-slot=\"pagination\"\n      className={cn('mx-auto flex w-full justify-center', className)}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationContent({\n  className,\n  ...props\n}: React.ComponentProps<'ul'>) {\n  return (\n    <ul\n      data-slot=\"pagination-content\"\n      className={cn('flex flex-row items-center gap-1', className)}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationItem({ ...props }: React.ComponentProps<'li'>) {\n  return <li data-slot=\"pagination-item\" {...props} />\n}\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<React.ComponentProps<typeof Button>, 'size'> &\n  React.ComponentProps<'a'>\n\nfunction PaginationLink({\n  className,\n  isActive,\n  size = 'icon',\n  ...props\n}: PaginationLinkProps) {\n  return (\n    <a\n      aria-current={isActive ? 'page' : undefined}\n      data-slot=\"pagination-link\"\n      data-active={isActive}\n      className={cn(\n        buttonVariants({\n          variant: isActive ? 'outline' : 'ghost',\n          size,\n        }),\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationPrevious({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) {\n  return (\n    <PaginationLink\n      aria-label=\"Go to previous page\"\n      size=\"default\"\n      className={cn('gap-1 px-2.5 sm:pl-2.5', className)}\n      {...props}\n    >\n      <ChevronLeftIcon />\n      <span className=\"hidden sm:block\">Previous</span>\n    </PaginationLink>\n  )\n}\n\nfunction PaginationNext({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) {\n  return (\n    <PaginationLink\n      aria-label=\"Go to next page\"\n      size=\"default\"\n      className={cn('gap-1 px-2.5 sm:pr-2.5', className)}\n      {...props}\n    >\n      <span className=\"hidden sm:block\">Next</span>\n      <ChevronRightIcon />\n    </PaginationLink>\n  )\n}\n\nfunction PaginationEllipsis({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      aria-hidden\n      data-slot=\"pagination-ellipsis\"\n      className={cn('flex size-9 items-center justify-center', className)}\n      {...props}\n    >\n      <MoreHorizontalIcon className=\"size-4\" />\n      <span className=\"sr-only\">More pages</span>\n    </span>\n  )\n}\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2713},"components/ui/popover.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as PopoverPrimitive from '@radix-ui/react-popover'\n\nimport { cn } from '@/lib/utils'\n\nfunction Popover({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />\n}\n\nfunction PopoverTrigger({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />\n}\n\nfunction PopoverContent({\n  className,\n  align = 'center',\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        data-slot=\"popover-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden',\n          className,\n        )}\n        {...props}\n      />\n    </PopoverPrimitive.Portal>\n  )\n}\n\nfunction PopoverAnchor({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />\n}\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1636},"components/ui/progress.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ProgressPrimitive from '@radix-ui/react-progress'\n\nimport { cn } from '@/lib/utils'\n\nfunction Progress({\n  className,\n  value,\n  ...props\n}: React.ComponentProps<typeof ProgressPrimitive.Root>) {\n  return (\n    <ProgressPrimitive.Root\n      data-slot=\"progress\"\n      className={cn(\n        'bg-primary/20 relative h-2 w-full overflow-hidden rounded-full',\n        className,\n      )}\n      {...props}\n    >\n      <ProgressPrimitive.Indicator\n        data-slot=\"progress-indicator\"\n        className=\"bg-primary h-full w-full flex-1 transition-all\"\n        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n      />\n    </ProgressPrimitive.Root>\n  )\n}\n\nexport { Progress }\n","size_bytes":741},"components/ui/radio-group.tsx":{"content":"\"use client\"\n\nimport type * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { CircleIcon } from \"@/lib/icons\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction RadioGroup({ className, ...props }: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {\n  return <RadioGroupPrimitive.Root data-slot=\"radio-group\" className={cn(\"grid gap-3\", className)} {...props} />\n}\n\nfunction RadioGroupItem({ className, ...props }: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {\n  return (\n    <RadioGroupPrimitive.Item\n      data-slot=\"radio-group-item\"\n      className={cn(\n        \"border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator\n        data-slot=\"radio-group-indicator\"\n        className=\"relative flex items-center justify-center\"\n      >\n        <CircleIcon className=\"fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n}\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1431},"components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport type * as React from \"react\"\nimport { GripVerticalIcon } from \"@/lib/icons\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction ResizablePanelGroup({ className, ...props }: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) {\n  return (\n    <ResizablePrimitive.PanelGroup\n      data-slot=\"resizable-panel-group\"\n      className={cn(\"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction ResizablePanel({ ...props }: React.ComponentProps<typeof ResizablePrimitive.Panel>) {\n  return <ResizablePrimitive.Panel data-slot=\"resizable-panel\" {...props} />\n}\n\nfunction ResizableHandle({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) {\n  return (\n    <ResizablePrimitive.PanelResizeHandle\n      data-slot=\"resizable-handle\"\n      className={cn(\n        \"bg-border focus-visible:ring-ring relative flex w-px items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:ring-1 focus-visible:ring-offset-1 focus-visible:outline-hidden data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:translate-x-0 data-[panel-group-direction=vertical]:after:-translate-y-1/2 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n        className,\n      )}\n      {...props}\n    >\n      {withHandle && (\n        <div className=\"bg-border z-10 flex h-4 w-3 items-center justify-center rounded-xs border\">\n          <GripVerticalIcon className=\"size-2.5\" />\n        </div>\n      )}\n    </ResizablePrimitive.PanelResizeHandle>\n  )\n}\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":2003},"components/ui/scroll-area.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area'\n\nimport { cn } from '@/lib/utils'\n\nfunction ScrollArea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {\n  return (\n    <ScrollAreaPrimitive.Root\n      data-slot=\"scroll-area\"\n      className={cn('relative', className)}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Viewport\n        data-slot=\"scroll-area-viewport\"\n        className=\"focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1\"\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  )\n}\n\nfunction ScrollBar({\n  className,\n  orientation = 'vertical',\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        'flex touch-none p-px transition-colors select-none',\n        orientation === 'vertical' &&\n          'h-full w-2.5 border-l border-l-transparent',\n        orientation === 'horizontal' &&\n          'h-2.5 flex-col border-t border-t-transparent',\n        className,\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb\n        data-slot=\"scroll-area-thumb\"\n        className=\"bg-border relative flex-1 rounded-full\"\n      />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  )\n}\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1646},"components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"@/lib/icons\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\"flex cursor-default items-center justify-center py-1\", className)}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\"flex cursor-default items-center justify-center py-1\", className)}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName = SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className,\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\",\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label ref={ref} className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)} {...props} />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className,\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator ref={ref} className={cn(\"-mx-1 my-1 h-px bg-muted\", className)} {...props} />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5566},"components/ui/separator.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SeparatorPrimitive from '@radix-ui/react-separator'\n\nimport { cn } from '@/lib/utils'\n\nfunction Separator({\n  className,\n  orientation = 'horizontal',\n  decorative = true,\n  ...props\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\n  return (\n    <SeparatorPrimitive.Root\n      data-slot=\"separator\"\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        'bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Separator }\n","size_bytes":700},"components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport type * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { XIcon } from \"@/lib/icons\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {\n  return <SheetPrimitive.Root data-slot=\"sheet\" {...props} />\n}\n\nfunction SheetTrigger({ ...props }: React.ComponentProps<typeof SheetPrimitive.Trigger>) {\n  return <SheetPrimitive.Trigger data-slot=\"sheet-trigger\" {...props} />\n}\n\nfunction SheetClose({ ...props }: React.ComponentProps<typeof SheetPrimitive.Close>) {\n  return <SheetPrimitive.Close data-slot=\"sheet-close\" {...props} />\n}\n\nfunction SheetPortal({ ...props }: React.ComponentProps<typeof SheetPrimitive.Portal>) {\n  return <SheetPrimitive.Portal data-slot=\"sheet-portal\" {...props} />\n}\n\nfunction SheetOverlay({ className, ...props }: React.ComponentProps<typeof SheetPrimitive.Overlay>) {\n  return (\n    <SheetPrimitive.Overlay\n      data-slot=\"sheet-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SheetContent({\n  className,\n  children,\n  side = \"right\",\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Content> & {\n  side?: \"top\" | \"right\" | \"bottom\" | \"left\"\n}) {\n  return (\n    <SheetPortal>\n      <SheetOverlay />\n      <SheetPrimitive.Content\n        data-slot=\"sheet-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n          side === \"right\" &&\n            \"data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm\",\n          side === \"left\" &&\n            \"data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm\",\n          side === \"top\" &&\n            \"data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b\",\n          side === \"bottom\" &&\n            \"data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t\",\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <SheetPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none\">\n          <XIcon className=\"size-4\" />\n          <span className=\"sr-only\">Close</span>\n        </SheetPrimitive.Close>\n      </SheetPrimitive.Content>\n    </SheetPortal>\n  )\n}\n\nfunction SheetHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return <div data-slot=\"sheet-header\" className={cn(\"flex flex-col gap-1.5 p-4\", className)} {...props} />\n}\n\nfunction SheetFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return <div data-slot=\"sheet-footer\" className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)} {...props} />\n}\n\nfunction SheetTitle({ className, ...props }: React.ComponentProps<typeof SheetPrimitive.Title>) {\n  return (\n    <SheetPrimitive.Title\n      data-slot=\"sheet-title\"\n      className={cn(\"text-foreground font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetDescription({ className, ...props }: React.ComponentProps<typeof SheetPrimitive.Description>) {\n  return (\n    <SheetPrimitive.Description\n      data-slot=\"sheet-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Sheet, SheetTrigger, SheetClose, SheetContent, SheetHeader, SheetFooter, SheetTitle, SheetDescription }\n","size_bytes":3997},"components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"@/lib/cva\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open],\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\", className)}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\"bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col\", className)}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]\"\n            : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon)\",\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]\"\n            : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className,\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({ className, onClick, ...props }: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"size-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({ className, ...props }: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({ className, ...props }: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent side=\"right\" align=\"center\" hidden={state !== \"collapsed\" || isMobile} {...tooltip} />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && <Skeleton className=\"size-4 rounded-md\" data-sidebar=\"menu-skeleton-icon\" />}\n      <Skeleton\n        className=\"h-4 max-w-(--skeleton-width) flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21417},"components/ui/skeleton.tsx":{"content":"import { cn } from '@/lib/utils'\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"skeleton\"\n      className={cn('bg-accent animate-pulse rounded-md', className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":276},"components/ui/slider.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SliderPrimitive from '@radix-ui/react-slider'\n\nimport { cn } from '@/lib/utils'\n\nfunction Slider({\n  className,\n  defaultValue,\n  value,\n  min = 0,\n  max = 100,\n  ...props\n}: React.ComponentProps<typeof SliderPrimitive.Root>) {\n  const _values = React.useMemo(\n    () =>\n      Array.isArray(value)\n        ? value\n        : Array.isArray(defaultValue)\n          ? defaultValue\n          : [min, max],\n    [value, defaultValue, min, max],\n  )\n\n  return (\n    <SliderPrimitive.Root\n      data-slot=\"slider\"\n      defaultValue={defaultValue}\n      value={value}\n      min={min}\n      max={max}\n      className={cn(\n        'relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col',\n        className,\n      )}\n      {...props}\n    >\n      <SliderPrimitive.Track\n        data-slot=\"slider-track\"\n        className={\n          'bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5'\n        }\n      >\n        <SliderPrimitive.Range\n          data-slot=\"slider-range\"\n          className={\n            'bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full'\n          }\n        />\n      </SliderPrimitive.Track>\n      {Array.from({ length: _values.length }, (_, index) => (\n        <SliderPrimitive.Thumb\n          data-slot=\"slider-thumb\"\n          key={index}\n          className=\"border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50\"\n        />\n      ))}\n    </SliderPrimitive.Root>\n  )\n}\n\nexport { Slider }\n","size_bytes":1995},"components/ui/sonner.tsx":{"content":"'use client'\n\nimport { useTheme } from 'next-themes'\nimport { Toaster as Sonner, ToasterProps } from 'sonner'\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = 'system' } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps['theme']}\n      className=\"toaster group\"\n      style={\n        {\n          '--normal-bg': 'var(--popover)',\n          '--normal-text': 'var(--popover-foreground)',\n          '--normal-border': 'var(--border)',\n        } as React.CSSProperties\n      }\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":564},"components/ui/switch.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className,\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\",\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1155},"components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<HTMLTableElement, React.HTMLAttributes<HTMLTableElement>>(\n  ({ className, ...props }, ref) => (\n    <div className=\"relative w-full overflow-auto\">\n      <table ref={ref} className={cn(\"w-full caption-bottom text-sm\", className)} {...props} />\n    </div>\n  ),\n)\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />,\n)\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => (\n    <tbody ref={ref} className={cn(\"[&_tr:last-child]:border-0\", className)} {...props} />\n  ),\n)\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(\n  ({ className, ...props }, ref) => (\n    <tfoot ref={ref} className={cn(\"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\", className)} {...props} />\n  ),\n)\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<HTMLTableRowElement, React.HTMLAttributes<HTMLTableRowElement>>(\n  ({ className, ...props }, ref) => (\n    <tr\n      ref={ref}\n      className={cn(\"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\", className)}\n      {...props}\n    />\n  ),\n)\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<HTMLTableCellElement, React.ThHTMLAttributes<HTMLTableCellElement>>(\n  ({ className, ...props }, ref) => (\n    <th\n      ref={ref}\n      className={cn(\n        \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n        className,\n      )}\n      {...props}\n    />\n  ),\n)\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<HTMLTableCellElement, React.TdHTMLAttributes<HTMLTableCellElement>>(\n  ({ className, ...props }, ref) => (\n    <td ref={ref} className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)} {...props} />\n  ),\n)\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<HTMLTableCaptionElement, React.HTMLAttributes<HTMLTableCaptionElement>>(\n  ({ className, ...props }, ref) => (\n    <caption ref={ref} className={cn(\"mt-4 text-sm text-muted-foreground\", className)} {...props} />\n  ),\n)\nTableCaption.displayName = \"TableCaption\"\n\nexport { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption }\n","size_bytes":2675},"components/ui/tabs.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className,\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className,\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className,\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1900},"components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":745},"components/ui/toast.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"@/lib/cva\"\nimport { X } from \"@/lib/icons\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className,\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive: \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> & VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return <ToastPrimitives.Root ref={ref} className={cn(toastVariants({ variant }), className)} {...props} />\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className,\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className,\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title ref={ref} className={cn(\"text-sm font-semibold\", className)} {...props} />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description ref={ref} className={cn(\"text-sm opacity-90\", className)} {...props} />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4773},"components/ui/toaster.tsx":{"content":"'use client'\n\nimport { useToast } from '@/hooks/use-toast'\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from '@/components/ui/toast'\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":786},"components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport type { VariantProps } from \"@/lib/cva\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<VariantProps<typeof toggleVariants>>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nfunction ToggleGroup({\n  className,\n  variant,\n  size,\n  children,\n  ...props\n}: React.ComponentProps<typeof ToggleGroupPrimitive.Root> & VariantProps<typeof toggleVariants>) {\n  return (\n    <ToggleGroupPrimitive.Root\n      data-slot=\"toggle-group\"\n      data-variant={variant}\n      data-size={size}\n      className={cn(\n        \"group/toggle-group flex w-fit items-center rounded-md data-[variant=outline]:shadow-xs\",\n        className,\n      )}\n      {...props}\n    >\n      <ToggleGroupContext.Provider value={{ variant, size }}>{children}</ToggleGroupContext.Provider>\n    </ToggleGroupPrimitive.Root>\n  )\n}\n\nfunction ToggleGroupItem({\n  className,\n  children,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof ToggleGroupPrimitive.Item> & VariantProps<typeof toggleVariants>) {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      data-slot=\"toggle-group-item\"\n      data-variant={context.variant || variant}\n      data-size={context.size || size}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        \"min-w-0 flex-1 shrink-0 rounded-none shadow-none first:rounded-l-md last:rounded-r-md focus:z-10 focus-visible:z-10 data-[variant=outline]:border-l-0 data-[variant=outline]:first:border-l\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n}\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1888},"components/ui/toggle.tsx":{"content":"\"use client\"\n\nimport type * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"@/lib/cva\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline: \"border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nfunction Toggle({\n  className,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof TogglePrimitive.Root> & VariantProps<typeof toggleVariants>) {\n  return (\n    <TogglePrimitive.Root data-slot=\"toggle\" className={cn(toggleVariants({ variant, size, className }))} {...props} />\n  )\n}\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"components/ui/tooltip.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip'\n\nimport { cn } from '@/lib/utils'\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return (\n    <TooltipPrimitive.Provider\n      data-slot=\"tooltip-provider\"\n      delayDuration={delayDuration}\n      {...props}\n    />\n  )\n}\n\nfunction Tooltip({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  )\n}\n\nfunction TooltipTrigger({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className=\"bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  )\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1892},"components/ui/use-mobile.tsx":{"content":"import * as React from 'react'\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener('change', onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener('change', onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"components/ui/use-toast.ts":{"content":"'use client'\n\n// Inspired by react-hot-toast library\nimport * as React from 'react'\n\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast'\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: 'ADD_TOAST',\n  UPDATE_TOAST: 'UPDATE_TOAST',\n  DISMISS_TOAST: 'DISMISS_TOAST',\n  REMOVE_TOAST: 'REMOVE_TOAST',\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType['ADD_TOAST']\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType['UPDATE_TOAST']\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType['DISMISS_TOAST']\n      toastId?: ToasterToast['id']\n    }\n  | {\n      type: ActionType['REMOVE_TOAST']\n      toastId?: ToasterToast['id']\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: 'REMOVE_TOAST',\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ADD_TOAST':\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case 'UPDATE_TOAST':\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      }\n\n    case 'DISMISS_TOAST': {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      }\n    }\n    case 'REMOVE_TOAST':\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, 'id'>\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: 'UPDATE_TOAST',\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id })\n\n  dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3945},"lib/supabase/client.ts":{"content":"interface MockUser {\n  id: string\n  email: string\n  created_at: string\n}\n\ninterface MockAuthResponse {\n  data: { user: MockUser | null }\n  error: any\n}\n\ninterface MockDataResponse<T> {\n  data: T | null\n  error: any\n}\n\nclass MockSupabaseClient {\n  auth = {\n    signInWithPassword: async ({ email, password }: { email: string; password: string }): Promise<MockAuthResponse> => {\n      // Mock authentication - accept any email/password for testing\n      if (email && password) {\n        return {\n          data: {\n            user: {\n              id: \"1\",\n              email,\n              created_at: new Date().toISOString(),\n            },\n          },\n          error: null,\n        }\n      }\n      return {\n        data: { user: null },\n        error: { message: \"Invalid credentials\" },\n      }\n    },\n\n    signUp: async ({\n      email,\n      password,\n      options,\n    }: { email: string; password: string; options?: any }): Promise<MockAuthResponse> => {\n      return {\n        data: {\n          user: {\n            id: Math.random().toString(),\n            email,\n            created_at: new Date().toISOString(),\n          },\n        },\n        error: null,\n      }\n    },\n\n    getUser: async (): Promise<MockAuthResponse> => {\n      // Mock logged in user for testing\n      return {\n        data: {\n          user: {\n            id: \"1\",\n            email: \"test@itera.ac.id\",\n            created_at: new Date().toISOString(),\n          },\n        },\n        error: null,\n      }\n    },\n\n    signOut: async () => {\n      return { error: null }\n    },\n  }\n\n  from = (table: string) => ({\n    select: (columns: string) => ({\n      eq: (column: string, value: any) => ({\n        single: async (): Promise<MockDataResponse<any>> => {\n          // Mock database responses based on table\n          if (table === \"User\") {\n            return {\n              data: {\n                id: \"1\",\n                email: value,\n                nim: \"121140001\",\n                name: \"Test User\",\n                phone: \"081234567890\",\n                programStudi: \"Teknik Informatika\",\n                gender: \"MALE\",\n                role: \"VOTER\",\n                isRegistered: true,\n                hasVoted: false,\n                createdAt: new Date().toISOString(),\n              },\n              error: null,\n            }\n          }\n          if (table === \"Candidate\") {\n            return {\n              data: [\n                {\n                  id: \"1\",\n                  name: \"Kandidat 1\",\n                  description: \"Visi misi kandidat 1\",\n                  photoUrl: \"/candidate-photo.jpg\",\n                  voteCount: 0,\n                },\n                {\n                  id: \"2\",\n                  name: \"Kandidat 2\",\n                  description: \"Visi misi kandidat 2\",\n                  photoUrl: \"/candidate-photo.jpg\",\n                  voteCount: 0,\n                },\n              ],\n              error: null,\n            }\n          }\n          return { data: null, error: null }\n        },\n      }),\n    }),\n\n    insert: async (data: any): Promise<MockDataResponse<any>> => {\n      return { data: { ...data, id: Math.random().toString() }, error: null }\n    },\n\n    update: async (data: any) => ({\n      eq: (column: string, value: any) => ({\n        select: async (): Promise<MockDataResponse<any>> => {\n          return { data: [{ ...data, id: value }], error: null }\n        },\n      }),\n    }),\n  })\n}\n\nexport function createClient() {\n  return new MockSupabaseClient()\n}\n","size_bytes":3518},"lib/supabase/server.ts":{"content":"import { createClient as createBrowserClient } from \"./client\"\n\nexport function createClient() {\n  return createBrowserClient()\n}\n","size_bytes":130}},"version":1}